// source: archer_protocol.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.archer_protocol.AGCMode', null, global);
goog.exportSymbol('proto.archer_protocol.ButtonEnum', null, global);
goog.exportSymbol('proto.archer_protocol.ButtonPress', null, global);
goog.exportSymbol('proto.archer_protocol.CMDDirect', null, global);
goog.exportSymbol('proto.archer_protocol.ClientDevStatus', null, global);
goog.exportSymbol('proto.archer_protocol.ClientPayload', null, global);
goog.exportSymbol('proto.archer_protocol.CoefRow', null, global);
goog.exportSymbol('proto.archer_protocol.ColorScheme', null, global);
goog.exportSymbol('proto.archer_protocol.Command', null, global);
goog.exportSymbol('proto.archer_protocol.Command.OneofcommandCase', null, global);
goog.exportSymbol('proto.archer_protocol.CommandResponse', null, global);
goog.exportSymbol('proto.archer_protocol.CommandResponse.OneofcommandresponseCase', null, global);
goog.exportSymbol('proto.archer_protocol.DType', null, global);
goog.exportSymbol('proto.archer_protocol.ErrorStatusCode', null, global);
goog.exportSymbol('proto.archer_protocol.FullProfileData', null, global);
goog.exportSymbol('proto.archer_protocol.GType', null, global);
goog.exportSymbol('proto.archer_protocol.GetHostDevStatus', null, global);
goog.exportSymbol('proto.archer_protocol.GetHostProfile', null, global);
goog.exportSymbol('proto.archer_protocol.GetProfiles', null, global);
goog.exportSymbol('proto.archer_protocol.GetReticles', null, global);
goog.exportSymbol('proto.archer_protocol.HoldoffType', null, global);
goog.exportSymbol('proto.archer_protocol.HostDevStatus', null, global);
goog.exportSymbol('proto.archer_protocol.HostPayload', null, global);
goog.exportSymbol('proto.archer_protocol.HostProfile', null, global);
goog.exportSymbol('proto.archer_protocol.OkStatusCode', null, global);
goog.exportSymbol('proto.archer_protocol.Payload', null, global);
goog.exportSymbol('proto.archer_protocol.ProfileList', null, global);
goog.exportSymbol('proto.archer_protocol.ProfileListEntry', null, global);
goog.exportSymbol('proto.archer_protocol.Reticle', null, global);
goog.exportSymbol('proto.archer_protocol.Reticles', null, global);
goog.exportSymbol('proto.archer_protocol.SetAgcMode', null, global);
goog.exportSymbol('proto.archer_protocol.SetAirHumidity', null, global);
goog.exportSymbol('proto.archer_protocol.SetAirPressure', null, global);
goog.exportSymbol('proto.archer_protocol.SetAirTemp', null, global);
goog.exportSymbol('proto.archer_protocol.SetColorScheme', null, global);
goog.exportSymbol('proto.archer_protocol.SetCompassOffset', null, global);
goog.exportSymbol('proto.archer_protocol.SetDistance', null, global);
goog.exportSymbol('proto.archer_protocol.SetHoldoff', null, global);
goog.exportSymbol('proto.archer_protocol.SetPowderTemp', null, global);
goog.exportSymbol('proto.archer_protocol.SetWind', null, global);
goog.exportSymbol('proto.archer_protocol.SetZeroing', null, global);
goog.exportSymbol('proto.archer_protocol.SetZoomLevel', null, global);
goog.exportSymbol('proto.archer_protocol.StatusError', null, global);
goog.exportSymbol('proto.archer_protocol.StatusOk', null, global);
goog.exportSymbol('proto.archer_protocol.SwPos', null, global);
goog.exportSymbol('proto.archer_protocol.TriggerCmd', null, global);
goog.exportSymbol('proto.archer_protocol.TwistDir', null, global);
goog.exportSymbol('proto.archer_protocol.UpdateProfiles', null, global);
goog.exportSymbol('proto.archer_protocol.UpdateReticles', null, global);
goog.exportSymbol('proto.archer_protocol.Zoom', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.archer_protocol.HostPayload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.archer_protocol.HostPayload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.archer_protocol.HostPayload.displayName = 'proto.archer_protocol.HostPayload';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.archer_protocol.ClientPayload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.archer_protocol.ClientPayload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.archer_protocol.ClientPayload.displayName = 'proto.archer_protocol.ClientPayload';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.archer_protocol.CommandResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.archer_protocol.CommandResponse.oneofGroups_);
};
goog.inherits(proto.archer_protocol.CommandResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.archer_protocol.CommandResponse.displayName = 'proto.archer_protocol.CommandResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.archer_protocol.Command = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.archer_protocol.Command.oneofGroups_);
};
goog.inherits(proto.archer_protocol.Command, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.archer_protocol.Command.displayName = 'proto.archer_protocol.Command';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.archer_protocol.GetProfiles = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.archer_protocol.GetProfiles, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.archer_protocol.GetProfiles.displayName = 'proto.archer_protocol.GetProfiles';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.archer_protocol.GetReticles = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.archer_protocol.GetReticles, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.archer_protocol.GetReticles.displayName = 'proto.archer_protocol.GetReticles';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.archer_protocol.UpdateReticles = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.archer_protocol.UpdateReticles, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.archer_protocol.UpdateReticles.displayName = 'proto.archer_protocol.UpdateReticles';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.archer_protocol.UpdateProfiles = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.archer_protocol.UpdateProfiles, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.archer_protocol.UpdateProfiles.displayName = 'proto.archer_protocol.UpdateProfiles';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.archer_protocol.StatusOk = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.archer_protocol.StatusOk, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.archer_protocol.StatusOk.displayName = 'proto.archer_protocol.StatusOk';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.archer_protocol.StatusError = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.archer_protocol.StatusError, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.archer_protocol.StatusError.displayName = 'proto.archer_protocol.StatusError';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.archer_protocol.SetZoomLevel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.archer_protocol.SetZoomLevel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.archer_protocol.SetZoomLevel.displayName = 'proto.archer_protocol.SetZoomLevel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.archer_protocol.SetColorScheme = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.archer_protocol.SetColorScheme, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.archer_protocol.SetColorScheme.displayName = 'proto.archer_protocol.SetColorScheme';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.archer_protocol.GetHostDevStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.archer_protocol.GetHostDevStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.archer_protocol.GetHostDevStatus.displayName = 'proto.archer_protocol.GetHostDevStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.archer_protocol.GetHostProfile = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.archer_protocol.GetHostProfile, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.archer_protocol.GetHostProfile.displayName = 'proto.archer_protocol.GetHostProfile';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.archer_protocol.SetAirTemp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.archer_protocol.SetAirTemp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.archer_protocol.SetAirTemp.displayName = 'proto.archer_protocol.SetAirTemp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.archer_protocol.SetPowderTemp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.archer_protocol.SetPowderTemp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.archer_protocol.SetPowderTemp.displayName = 'proto.archer_protocol.SetPowderTemp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.archer_protocol.SetAirHumidity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.archer_protocol.SetAirHumidity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.archer_protocol.SetAirHumidity.displayName = 'proto.archer_protocol.SetAirHumidity';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.archer_protocol.SetAirPressure = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.archer_protocol.SetAirPressure, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.archer_protocol.SetAirPressure.displayName = 'proto.archer_protocol.SetAirPressure';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.archer_protocol.SetWind = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.archer_protocol.SetWind, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.archer_protocol.SetWind.displayName = 'proto.archer_protocol.SetWind';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.archer_protocol.SetDistance = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.archer_protocol.SetDistance, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.archer_protocol.SetDistance.displayName = 'proto.archer_protocol.SetDistance';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.archer_protocol.SetAgcMode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.archer_protocol.SetAgcMode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.archer_protocol.SetAgcMode.displayName = 'proto.archer_protocol.SetAgcMode';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.archer_protocol.SetCompassOffset = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.archer_protocol.SetCompassOffset, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.archer_protocol.SetCompassOffset.displayName = 'proto.archer_protocol.SetCompassOffset';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.archer_protocol.SetHoldoff = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.archer_protocol.SetHoldoff, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.archer_protocol.SetHoldoff.displayName = 'proto.archer_protocol.SetHoldoff';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.archer_protocol.ButtonPress = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.archer_protocol.ButtonPress, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.archer_protocol.ButtonPress.displayName = 'proto.archer_protocol.ButtonPress';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.archer_protocol.TriggerCmd = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.archer_protocol.TriggerCmd, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.archer_protocol.TriggerCmd.displayName = 'proto.archer_protocol.TriggerCmd';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.archer_protocol.SetZeroing = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.archer_protocol.SetZeroing, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.archer_protocol.SetZeroing.displayName = 'proto.archer_protocol.SetZeroing';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.archer_protocol.HostDevStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.archer_protocol.HostDevStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.archer_protocol.HostDevStatus.displayName = 'proto.archer_protocol.HostDevStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.archer_protocol.ClientDevStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.archer_protocol.ClientDevStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.archer_protocol.ClientDevStatus.displayName = 'proto.archer_protocol.ClientDevStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.archer_protocol.CoefRow = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.archer_protocol.CoefRow, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.archer_protocol.CoefRow.displayName = 'proto.archer_protocol.CoefRow';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.archer_protocol.SwPos = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.archer_protocol.SwPos, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.archer_protocol.SwPos.displayName = 'proto.archer_protocol.SwPos';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.archer_protocol.HostProfile = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.archer_protocol.HostProfile.repeatedFields_, null);
};
goog.inherits(proto.archer_protocol.HostProfile, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.archer_protocol.HostProfile.displayName = 'proto.archer_protocol.HostProfile';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.archer_protocol.ProfileList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.archer_protocol.ProfileList.repeatedFields_, null);
};
goog.inherits(proto.archer_protocol.ProfileList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.archer_protocol.ProfileList.displayName = 'proto.archer_protocol.ProfileList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.archer_protocol.ProfileListEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.archer_protocol.ProfileListEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.archer_protocol.ProfileListEntry.displayName = 'proto.archer_protocol.ProfileListEntry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.archer_protocol.FullProfileData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.archer_protocol.FullProfileData.repeatedFields_, null);
};
goog.inherits(proto.archer_protocol.FullProfileData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.archer_protocol.FullProfileData.displayName = 'proto.archer_protocol.FullProfileData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.archer_protocol.Reticle = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.archer_protocol.Reticle, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.archer_protocol.Reticle.displayName = 'proto.archer_protocol.Reticle';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.archer_protocol.Reticles = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.archer_protocol.Reticles.repeatedFields_, null);
};
goog.inherits(proto.archer_protocol.Reticles, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.archer_protocol.Reticles.displayName = 'proto.archer_protocol.Reticles';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.archer_protocol.Payload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.archer_protocol.Payload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.archer_protocol.Payload.displayName = 'proto.archer_protocol.Payload';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.archer_protocol.HostPayload.prototype.toObject = function(opt_includeInstance) {
  return proto.archer_protocol.HostPayload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.archer_protocol.HostPayload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.HostPayload.toObject = function(includeInstance, msg) {
  var f, obj = {
    profile: (f = msg.getProfile()) && proto.archer_protocol.HostProfile.toObject(includeInstance, f),
    devstatus: (f = msg.getDevstatus()) && proto.archer_protocol.HostDevStatus.toObject(includeInstance, f),
    response: (f = msg.getResponse()) && proto.archer_protocol.CommandResponse.toObject(includeInstance, f),
    reticles: (f = msg.getReticles()) && proto.archer_protocol.Reticles.toObject(includeInstance, f),
    allprofiles: (f = msg.getAllprofiles()) && proto.archer_protocol.FullProfileData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.archer_protocol.HostPayload}
 */
proto.archer_protocol.HostPayload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.archer_protocol.HostPayload;
  return proto.archer_protocol.HostPayload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.archer_protocol.HostPayload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.archer_protocol.HostPayload}
 */
proto.archer_protocol.HostPayload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.archer_protocol.HostProfile;
      reader.readMessage(value,proto.archer_protocol.HostProfile.deserializeBinaryFromReader);
      msg.setProfile(value);
      break;
    case 2:
      var value = new proto.archer_protocol.HostDevStatus;
      reader.readMessage(value,proto.archer_protocol.HostDevStatus.deserializeBinaryFromReader);
      msg.setDevstatus(value);
      break;
    case 3:
      var value = new proto.archer_protocol.CommandResponse;
      reader.readMessage(value,proto.archer_protocol.CommandResponse.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    case 4:
      var value = new proto.archer_protocol.Reticles;
      reader.readMessage(value,proto.archer_protocol.Reticles.deserializeBinaryFromReader);
      msg.setReticles(value);
      break;
    case 5:
      var value = new proto.archer_protocol.FullProfileData;
      reader.readMessage(value,proto.archer_protocol.FullProfileData.deserializeBinaryFromReader);
      msg.setAllprofiles(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.archer_protocol.HostPayload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.archer_protocol.HostPayload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.archer_protocol.HostPayload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.HostPayload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProfile();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.archer_protocol.HostProfile.serializeBinaryToWriter
    );
  }
  f = message.getDevstatus();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.archer_protocol.HostDevStatus.serializeBinaryToWriter
    );
  }
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.archer_protocol.CommandResponse.serializeBinaryToWriter
    );
  }
  f = message.getReticles();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.archer_protocol.Reticles.serializeBinaryToWriter
    );
  }
  f = message.getAllprofiles();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.archer_protocol.FullProfileData.serializeBinaryToWriter
    );
  }
};


/**
 * optional HostProfile profile = 1;
 * @return {?proto.archer_protocol.HostProfile}
 */
proto.archer_protocol.HostPayload.prototype.getProfile = function() {
  return /** @type{?proto.archer_protocol.HostProfile} */ (
    jspb.Message.getWrapperField(this, proto.archer_protocol.HostProfile, 1));
};


/**
 * @param {?proto.archer_protocol.HostProfile|undefined} value
 * @return {!proto.archer_protocol.HostPayload} returns this
*/
proto.archer_protocol.HostPayload.prototype.setProfile = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.archer_protocol.HostPayload} returns this
 */
proto.archer_protocol.HostPayload.prototype.clearProfile = function() {
  return this.setProfile(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.archer_protocol.HostPayload.prototype.hasProfile = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional HostDevStatus devStatus = 2;
 * @return {?proto.archer_protocol.HostDevStatus}
 */
proto.archer_protocol.HostPayload.prototype.getDevstatus = function() {
  return /** @type{?proto.archer_protocol.HostDevStatus} */ (
    jspb.Message.getWrapperField(this, proto.archer_protocol.HostDevStatus, 2));
};


/**
 * @param {?proto.archer_protocol.HostDevStatus|undefined} value
 * @return {!proto.archer_protocol.HostPayload} returns this
*/
proto.archer_protocol.HostPayload.prototype.setDevstatus = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.archer_protocol.HostPayload} returns this
 */
proto.archer_protocol.HostPayload.prototype.clearDevstatus = function() {
  return this.setDevstatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.archer_protocol.HostPayload.prototype.hasDevstatus = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional CommandResponse response = 3;
 * @return {?proto.archer_protocol.CommandResponse}
 */
proto.archer_protocol.HostPayload.prototype.getResponse = function() {
  return /** @type{?proto.archer_protocol.CommandResponse} */ (
    jspb.Message.getWrapperField(this, proto.archer_protocol.CommandResponse, 3));
};


/**
 * @param {?proto.archer_protocol.CommandResponse|undefined} value
 * @return {!proto.archer_protocol.HostPayload} returns this
*/
proto.archer_protocol.HostPayload.prototype.setResponse = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.archer_protocol.HostPayload} returns this
 */
proto.archer_protocol.HostPayload.prototype.clearResponse = function() {
  return this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.archer_protocol.HostPayload.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Reticles reticles = 4;
 * @return {?proto.archer_protocol.Reticles}
 */
proto.archer_protocol.HostPayload.prototype.getReticles = function() {
  return /** @type{?proto.archer_protocol.Reticles} */ (
    jspb.Message.getWrapperField(this, proto.archer_protocol.Reticles, 4));
};


/**
 * @param {?proto.archer_protocol.Reticles|undefined} value
 * @return {!proto.archer_protocol.HostPayload} returns this
*/
proto.archer_protocol.HostPayload.prototype.setReticles = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.archer_protocol.HostPayload} returns this
 */
proto.archer_protocol.HostPayload.prototype.clearReticles = function() {
  return this.setReticles(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.archer_protocol.HostPayload.prototype.hasReticles = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional FullProfileData allProfiles = 5;
 * @return {?proto.archer_protocol.FullProfileData}
 */
proto.archer_protocol.HostPayload.prototype.getAllprofiles = function() {
  return /** @type{?proto.archer_protocol.FullProfileData} */ (
    jspb.Message.getWrapperField(this, proto.archer_protocol.FullProfileData, 5));
};


/**
 * @param {?proto.archer_protocol.FullProfileData|undefined} value
 * @return {!proto.archer_protocol.HostPayload} returns this
*/
proto.archer_protocol.HostPayload.prototype.setAllprofiles = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.archer_protocol.HostPayload} returns this
 */
proto.archer_protocol.HostPayload.prototype.clearAllprofiles = function() {
  return this.setAllprofiles(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.archer_protocol.HostPayload.prototype.hasAllprofiles = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.archer_protocol.ClientPayload.prototype.toObject = function(opt_includeInstance) {
  return proto.archer_protocol.ClientPayload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.archer_protocol.ClientPayload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.ClientPayload.toObject = function(includeInstance, msg) {
  var f, obj = {
    devstatus: (f = msg.getDevstatus()) && proto.archer_protocol.ClientDevStatus.toObject(includeInstance, f),
    command: (f = msg.getCommand()) && proto.archer_protocol.Command.toObject(includeInstance, f),
    response: (f = msg.getResponse()) && proto.archer_protocol.CommandResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.archer_protocol.ClientPayload}
 */
proto.archer_protocol.ClientPayload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.archer_protocol.ClientPayload;
  return proto.archer_protocol.ClientPayload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.archer_protocol.ClientPayload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.archer_protocol.ClientPayload}
 */
proto.archer_protocol.ClientPayload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.archer_protocol.ClientDevStatus;
      reader.readMessage(value,proto.archer_protocol.ClientDevStatus.deserializeBinaryFromReader);
      msg.setDevstatus(value);
      break;
    case 3:
      var value = new proto.archer_protocol.Command;
      reader.readMessage(value,proto.archer_protocol.Command.deserializeBinaryFromReader);
      msg.setCommand(value);
      break;
    case 4:
      var value = new proto.archer_protocol.CommandResponse;
      reader.readMessage(value,proto.archer_protocol.CommandResponse.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.archer_protocol.ClientPayload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.archer_protocol.ClientPayload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.archer_protocol.ClientPayload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.ClientPayload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevstatus();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.archer_protocol.ClientDevStatus.serializeBinaryToWriter
    );
  }
  f = message.getCommand();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.archer_protocol.Command.serializeBinaryToWriter
    );
  }
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.archer_protocol.CommandResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional ClientDevStatus devStatus = 2;
 * @return {?proto.archer_protocol.ClientDevStatus}
 */
proto.archer_protocol.ClientPayload.prototype.getDevstatus = function() {
  return /** @type{?proto.archer_protocol.ClientDevStatus} */ (
    jspb.Message.getWrapperField(this, proto.archer_protocol.ClientDevStatus, 2));
};


/**
 * @param {?proto.archer_protocol.ClientDevStatus|undefined} value
 * @return {!proto.archer_protocol.ClientPayload} returns this
*/
proto.archer_protocol.ClientPayload.prototype.setDevstatus = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.archer_protocol.ClientPayload} returns this
 */
proto.archer_protocol.ClientPayload.prototype.clearDevstatus = function() {
  return this.setDevstatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.archer_protocol.ClientPayload.prototype.hasDevstatus = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Command command = 3;
 * @return {?proto.archer_protocol.Command}
 */
proto.archer_protocol.ClientPayload.prototype.getCommand = function() {
  return /** @type{?proto.archer_protocol.Command} */ (
    jspb.Message.getWrapperField(this, proto.archer_protocol.Command, 3));
};


/**
 * @param {?proto.archer_protocol.Command|undefined} value
 * @return {!proto.archer_protocol.ClientPayload} returns this
*/
proto.archer_protocol.ClientPayload.prototype.setCommand = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.archer_protocol.ClientPayload} returns this
 */
proto.archer_protocol.ClientPayload.prototype.clearCommand = function() {
  return this.setCommand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.archer_protocol.ClientPayload.prototype.hasCommand = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional CommandResponse response = 4;
 * @return {?proto.archer_protocol.CommandResponse}
 */
proto.archer_protocol.ClientPayload.prototype.getResponse = function() {
  return /** @type{?proto.archer_protocol.CommandResponse} */ (
    jspb.Message.getWrapperField(this, proto.archer_protocol.CommandResponse, 4));
};


/**
 * @param {?proto.archer_protocol.CommandResponse|undefined} value
 * @return {!proto.archer_protocol.ClientPayload} returns this
*/
proto.archer_protocol.ClientPayload.prototype.setResponse = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.archer_protocol.ClientPayload} returns this
 */
proto.archer_protocol.ClientPayload.prototype.clearResponse = function() {
  return this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.archer_protocol.ClientPayload.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.archer_protocol.CommandResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.archer_protocol.CommandResponse.OneofcommandresponseCase = {
  ONEOFCOMMANDRESPONSE_NOT_SET: 0,
  STATUSOK: 1,
  STATUSERR: 2
};

/**
 * @return {proto.archer_protocol.CommandResponse.OneofcommandresponseCase}
 */
proto.archer_protocol.CommandResponse.prototype.getOneofcommandresponseCase = function() {
  return /** @type {proto.archer_protocol.CommandResponse.OneofcommandresponseCase} */(jspb.Message.computeOneofCase(this, proto.archer_protocol.CommandResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.archer_protocol.CommandResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.archer_protocol.CommandResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.archer_protocol.CommandResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.CommandResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    statusok: (f = msg.getStatusok()) && proto.archer_protocol.StatusOk.toObject(includeInstance, f),
    statuserr: (f = msg.getStatuserr()) && proto.archer_protocol.StatusError.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.archer_protocol.CommandResponse}
 */
proto.archer_protocol.CommandResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.archer_protocol.CommandResponse;
  return proto.archer_protocol.CommandResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.archer_protocol.CommandResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.archer_protocol.CommandResponse}
 */
proto.archer_protocol.CommandResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.archer_protocol.StatusOk;
      reader.readMessage(value,proto.archer_protocol.StatusOk.deserializeBinaryFromReader);
      msg.setStatusok(value);
      break;
    case 2:
      var value = new proto.archer_protocol.StatusError;
      reader.readMessage(value,proto.archer_protocol.StatusError.deserializeBinaryFromReader);
      msg.setStatuserr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.archer_protocol.CommandResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.archer_protocol.CommandResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.archer_protocol.CommandResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.CommandResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatusok();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.archer_protocol.StatusOk.serializeBinaryToWriter
    );
  }
  f = message.getStatuserr();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.archer_protocol.StatusError.serializeBinaryToWriter
    );
  }
};


/**
 * optional StatusOk statusOk = 1;
 * @return {?proto.archer_protocol.StatusOk}
 */
proto.archer_protocol.CommandResponse.prototype.getStatusok = function() {
  return /** @type{?proto.archer_protocol.StatusOk} */ (
    jspb.Message.getWrapperField(this, proto.archer_protocol.StatusOk, 1));
};


/**
 * @param {?proto.archer_protocol.StatusOk|undefined} value
 * @return {!proto.archer_protocol.CommandResponse} returns this
*/
proto.archer_protocol.CommandResponse.prototype.setStatusok = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.archer_protocol.CommandResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.archer_protocol.CommandResponse} returns this
 */
proto.archer_protocol.CommandResponse.prototype.clearStatusok = function() {
  return this.setStatusok(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.archer_protocol.CommandResponse.prototype.hasStatusok = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional StatusError statusErr = 2;
 * @return {?proto.archer_protocol.StatusError}
 */
proto.archer_protocol.CommandResponse.prototype.getStatuserr = function() {
  return /** @type{?proto.archer_protocol.StatusError} */ (
    jspb.Message.getWrapperField(this, proto.archer_protocol.StatusError, 2));
};


/**
 * @param {?proto.archer_protocol.StatusError|undefined} value
 * @return {!proto.archer_protocol.CommandResponse} returns this
*/
proto.archer_protocol.CommandResponse.prototype.setStatuserr = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.archer_protocol.CommandResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.archer_protocol.CommandResponse} returns this
 */
proto.archer_protocol.CommandResponse.prototype.clearStatuserr = function() {
  return this.setStatuserr(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.archer_protocol.CommandResponse.prototype.hasStatuserr = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.archer_protocol.Command.oneofGroups_ = [[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]];

/**
 * @enum {number}
 */
proto.archer_protocol.Command.OneofcommandCase = {
  ONEOFCOMMAND_NOT_SET: 0,
  SETZOOM: 1,
  SETPALLETTE: 2,
  SETAGC: 3,
  SETDST: 4,
  SETHOLDOFF: 5,
  SETZEROING: 6,
  SETMAGOFFSET: 7,
  SETAIRTC: 8,
  SETAIRHUM: 9,
  SETAIRPRESS: 10,
  SETPOWDERTEMP: 11,
  SETWIND: 12,
  BUTTONPRESS: 13,
  CMDTRIGGER: 14,
  GETHOSTDEVSTATUS: 15,
  GETHOSTPROFILE: 16,
  GETALLPROFILES: 17,
  UPDATEALLPROFILES: 18,
  GETRETICLES: 19,
  UPDATERETICLES: 20
};

/**
 * @return {proto.archer_protocol.Command.OneofcommandCase}
 */
proto.archer_protocol.Command.prototype.getOneofcommandCase = function() {
  return /** @type {proto.archer_protocol.Command.OneofcommandCase} */(jspb.Message.computeOneofCase(this, proto.archer_protocol.Command.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.archer_protocol.Command.prototype.toObject = function(opt_includeInstance) {
  return proto.archer_protocol.Command.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.archer_protocol.Command} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.Command.toObject = function(includeInstance, msg) {
  var f, obj = {
    setzoom: (f = msg.getSetzoom()) && proto.archer_protocol.SetZoomLevel.toObject(includeInstance, f),
    setpallette: (f = msg.getSetpallette()) && proto.archer_protocol.SetColorScheme.toObject(includeInstance, f),
    setagc: (f = msg.getSetagc()) && proto.archer_protocol.SetAgcMode.toObject(includeInstance, f),
    setdst: (f = msg.getSetdst()) && proto.archer_protocol.SetDistance.toObject(includeInstance, f),
    setholdoff: (f = msg.getSetholdoff()) && proto.archer_protocol.SetHoldoff.toObject(includeInstance, f),
    setzeroing: (f = msg.getSetzeroing()) && proto.archer_protocol.SetZeroing.toObject(includeInstance, f),
    setmagoffset: (f = msg.getSetmagoffset()) && proto.archer_protocol.SetCompassOffset.toObject(includeInstance, f),
    setairtc: (f = msg.getSetairtc()) && proto.archer_protocol.SetAirTemp.toObject(includeInstance, f),
    setairhum: (f = msg.getSetairhum()) && proto.archer_protocol.SetAirHumidity.toObject(includeInstance, f),
    setairpress: (f = msg.getSetairpress()) && proto.archer_protocol.SetAirPressure.toObject(includeInstance, f),
    setpowdertemp: (f = msg.getSetpowdertemp()) && proto.archer_protocol.SetPowderTemp.toObject(includeInstance, f),
    setwind: (f = msg.getSetwind()) && proto.archer_protocol.SetWind.toObject(includeInstance, f),
    buttonpress: (f = msg.getButtonpress()) && proto.archer_protocol.ButtonPress.toObject(includeInstance, f),
    cmdtrigger: (f = msg.getCmdtrigger()) && proto.archer_protocol.TriggerCmd.toObject(includeInstance, f),
    gethostdevstatus: (f = msg.getGethostdevstatus()) && proto.archer_protocol.GetHostDevStatus.toObject(includeInstance, f),
    gethostprofile: (f = msg.getGethostprofile()) && proto.archer_protocol.GetHostProfile.toObject(includeInstance, f),
    getallprofiles: (f = msg.getGetallprofiles()) && proto.archer_protocol.GetProfiles.toObject(includeInstance, f),
    updateallprofiles: (f = msg.getUpdateallprofiles()) && proto.archer_protocol.UpdateProfiles.toObject(includeInstance, f),
    getreticles: (f = msg.getGetreticles()) && proto.archer_protocol.GetReticles.toObject(includeInstance, f),
    updatereticles: (f = msg.getUpdatereticles()) && proto.archer_protocol.UpdateReticles.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.archer_protocol.Command}
 */
proto.archer_protocol.Command.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.archer_protocol.Command;
  return proto.archer_protocol.Command.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.archer_protocol.Command} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.archer_protocol.Command}
 */
proto.archer_protocol.Command.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.archer_protocol.SetZoomLevel;
      reader.readMessage(value,proto.archer_protocol.SetZoomLevel.deserializeBinaryFromReader);
      msg.setSetzoom(value);
      break;
    case 2:
      var value = new proto.archer_protocol.SetColorScheme;
      reader.readMessage(value,proto.archer_protocol.SetColorScheme.deserializeBinaryFromReader);
      msg.setSetpallette(value);
      break;
    case 3:
      var value = new proto.archer_protocol.SetAgcMode;
      reader.readMessage(value,proto.archer_protocol.SetAgcMode.deserializeBinaryFromReader);
      msg.setSetagc(value);
      break;
    case 4:
      var value = new proto.archer_protocol.SetDistance;
      reader.readMessage(value,proto.archer_protocol.SetDistance.deserializeBinaryFromReader);
      msg.setSetdst(value);
      break;
    case 5:
      var value = new proto.archer_protocol.SetHoldoff;
      reader.readMessage(value,proto.archer_protocol.SetHoldoff.deserializeBinaryFromReader);
      msg.setSetholdoff(value);
      break;
    case 6:
      var value = new proto.archer_protocol.SetZeroing;
      reader.readMessage(value,proto.archer_protocol.SetZeroing.deserializeBinaryFromReader);
      msg.setSetzeroing(value);
      break;
    case 7:
      var value = new proto.archer_protocol.SetCompassOffset;
      reader.readMessage(value,proto.archer_protocol.SetCompassOffset.deserializeBinaryFromReader);
      msg.setSetmagoffset(value);
      break;
    case 8:
      var value = new proto.archer_protocol.SetAirTemp;
      reader.readMessage(value,proto.archer_protocol.SetAirTemp.deserializeBinaryFromReader);
      msg.setSetairtc(value);
      break;
    case 9:
      var value = new proto.archer_protocol.SetAirHumidity;
      reader.readMessage(value,proto.archer_protocol.SetAirHumidity.deserializeBinaryFromReader);
      msg.setSetairhum(value);
      break;
    case 10:
      var value = new proto.archer_protocol.SetAirPressure;
      reader.readMessage(value,proto.archer_protocol.SetAirPressure.deserializeBinaryFromReader);
      msg.setSetairpress(value);
      break;
    case 11:
      var value = new proto.archer_protocol.SetPowderTemp;
      reader.readMessage(value,proto.archer_protocol.SetPowderTemp.deserializeBinaryFromReader);
      msg.setSetpowdertemp(value);
      break;
    case 12:
      var value = new proto.archer_protocol.SetWind;
      reader.readMessage(value,proto.archer_protocol.SetWind.deserializeBinaryFromReader);
      msg.setSetwind(value);
      break;
    case 13:
      var value = new proto.archer_protocol.ButtonPress;
      reader.readMessage(value,proto.archer_protocol.ButtonPress.deserializeBinaryFromReader);
      msg.setButtonpress(value);
      break;
    case 14:
      var value = new proto.archer_protocol.TriggerCmd;
      reader.readMessage(value,proto.archer_protocol.TriggerCmd.deserializeBinaryFromReader);
      msg.setCmdtrigger(value);
      break;
    case 15:
      var value = new proto.archer_protocol.GetHostDevStatus;
      reader.readMessage(value,proto.archer_protocol.GetHostDevStatus.deserializeBinaryFromReader);
      msg.setGethostdevstatus(value);
      break;
    case 16:
      var value = new proto.archer_protocol.GetHostProfile;
      reader.readMessage(value,proto.archer_protocol.GetHostProfile.deserializeBinaryFromReader);
      msg.setGethostprofile(value);
      break;
    case 17:
      var value = new proto.archer_protocol.GetProfiles;
      reader.readMessage(value,proto.archer_protocol.GetProfiles.deserializeBinaryFromReader);
      msg.setGetallprofiles(value);
      break;
    case 18:
      var value = new proto.archer_protocol.UpdateProfiles;
      reader.readMessage(value,proto.archer_protocol.UpdateProfiles.deserializeBinaryFromReader);
      msg.setUpdateallprofiles(value);
      break;
    case 19:
      var value = new proto.archer_protocol.GetReticles;
      reader.readMessage(value,proto.archer_protocol.GetReticles.deserializeBinaryFromReader);
      msg.setGetreticles(value);
      break;
    case 20:
      var value = new proto.archer_protocol.UpdateReticles;
      reader.readMessage(value,proto.archer_protocol.UpdateReticles.deserializeBinaryFromReader);
      msg.setUpdatereticles(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.archer_protocol.Command.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.archer_protocol.Command.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.archer_protocol.Command} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.Command.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSetzoom();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.archer_protocol.SetZoomLevel.serializeBinaryToWriter
    );
  }
  f = message.getSetpallette();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.archer_protocol.SetColorScheme.serializeBinaryToWriter
    );
  }
  f = message.getSetagc();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.archer_protocol.SetAgcMode.serializeBinaryToWriter
    );
  }
  f = message.getSetdst();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.archer_protocol.SetDistance.serializeBinaryToWriter
    );
  }
  f = message.getSetholdoff();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.archer_protocol.SetHoldoff.serializeBinaryToWriter
    );
  }
  f = message.getSetzeroing();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.archer_protocol.SetZeroing.serializeBinaryToWriter
    );
  }
  f = message.getSetmagoffset();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.archer_protocol.SetCompassOffset.serializeBinaryToWriter
    );
  }
  f = message.getSetairtc();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.archer_protocol.SetAirTemp.serializeBinaryToWriter
    );
  }
  f = message.getSetairhum();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.archer_protocol.SetAirHumidity.serializeBinaryToWriter
    );
  }
  f = message.getSetairpress();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.archer_protocol.SetAirPressure.serializeBinaryToWriter
    );
  }
  f = message.getSetpowdertemp();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.archer_protocol.SetPowderTemp.serializeBinaryToWriter
    );
  }
  f = message.getSetwind();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.archer_protocol.SetWind.serializeBinaryToWriter
    );
  }
  f = message.getButtonpress();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.archer_protocol.ButtonPress.serializeBinaryToWriter
    );
  }
  f = message.getCmdtrigger();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.archer_protocol.TriggerCmd.serializeBinaryToWriter
    );
  }
  f = message.getGethostdevstatus();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.archer_protocol.GetHostDevStatus.serializeBinaryToWriter
    );
  }
  f = message.getGethostprofile();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.archer_protocol.GetHostProfile.serializeBinaryToWriter
    );
  }
  f = message.getGetallprofiles();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.archer_protocol.GetProfiles.serializeBinaryToWriter
    );
  }
  f = message.getUpdateallprofiles();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.archer_protocol.UpdateProfiles.serializeBinaryToWriter
    );
  }
  f = message.getGetreticles();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto.archer_protocol.GetReticles.serializeBinaryToWriter
    );
  }
  f = message.getUpdatereticles();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.archer_protocol.UpdateReticles.serializeBinaryToWriter
    );
  }
};


/**
 * optional SetZoomLevel setZoom = 1;
 * @return {?proto.archer_protocol.SetZoomLevel}
 */
proto.archer_protocol.Command.prototype.getSetzoom = function() {
  return /** @type{?proto.archer_protocol.SetZoomLevel} */ (
    jspb.Message.getWrapperField(this, proto.archer_protocol.SetZoomLevel, 1));
};


/**
 * @param {?proto.archer_protocol.SetZoomLevel|undefined} value
 * @return {!proto.archer_protocol.Command} returns this
*/
proto.archer_protocol.Command.prototype.setSetzoom = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.archer_protocol.Command.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.archer_protocol.Command} returns this
 */
proto.archer_protocol.Command.prototype.clearSetzoom = function() {
  return this.setSetzoom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.archer_protocol.Command.prototype.hasSetzoom = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SetColorScheme setPallette = 2;
 * @return {?proto.archer_protocol.SetColorScheme}
 */
proto.archer_protocol.Command.prototype.getSetpallette = function() {
  return /** @type{?proto.archer_protocol.SetColorScheme} */ (
    jspb.Message.getWrapperField(this, proto.archer_protocol.SetColorScheme, 2));
};


/**
 * @param {?proto.archer_protocol.SetColorScheme|undefined} value
 * @return {!proto.archer_protocol.Command} returns this
*/
proto.archer_protocol.Command.prototype.setSetpallette = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.archer_protocol.Command.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.archer_protocol.Command} returns this
 */
proto.archer_protocol.Command.prototype.clearSetpallette = function() {
  return this.setSetpallette(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.archer_protocol.Command.prototype.hasSetpallette = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional SetAgcMode setAgc = 3;
 * @return {?proto.archer_protocol.SetAgcMode}
 */
proto.archer_protocol.Command.prototype.getSetagc = function() {
  return /** @type{?proto.archer_protocol.SetAgcMode} */ (
    jspb.Message.getWrapperField(this, proto.archer_protocol.SetAgcMode, 3));
};


/**
 * @param {?proto.archer_protocol.SetAgcMode|undefined} value
 * @return {!proto.archer_protocol.Command} returns this
*/
proto.archer_protocol.Command.prototype.setSetagc = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.archer_protocol.Command.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.archer_protocol.Command} returns this
 */
proto.archer_protocol.Command.prototype.clearSetagc = function() {
  return this.setSetagc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.archer_protocol.Command.prototype.hasSetagc = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional SetDistance setDst = 4;
 * @return {?proto.archer_protocol.SetDistance}
 */
proto.archer_protocol.Command.prototype.getSetdst = function() {
  return /** @type{?proto.archer_protocol.SetDistance} */ (
    jspb.Message.getWrapperField(this, proto.archer_protocol.SetDistance, 4));
};


/**
 * @param {?proto.archer_protocol.SetDistance|undefined} value
 * @return {!proto.archer_protocol.Command} returns this
*/
proto.archer_protocol.Command.prototype.setSetdst = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.archer_protocol.Command.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.archer_protocol.Command} returns this
 */
proto.archer_protocol.Command.prototype.clearSetdst = function() {
  return this.setSetdst(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.archer_protocol.Command.prototype.hasSetdst = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional SetHoldoff setHoldoff = 5;
 * @return {?proto.archer_protocol.SetHoldoff}
 */
proto.archer_protocol.Command.prototype.getSetholdoff = function() {
  return /** @type{?proto.archer_protocol.SetHoldoff} */ (
    jspb.Message.getWrapperField(this, proto.archer_protocol.SetHoldoff, 5));
};


/**
 * @param {?proto.archer_protocol.SetHoldoff|undefined} value
 * @return {!proto.archer_protocol.Command} returns this
*/
proto.archer_protocol.Command.prototype.setSetholdoff = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.archer_protocol.Command.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.archer_protocol.Command} returns this
 */
proto.archer_protocol.Command.prototype.clearSetholdoff = function() {
  return this.setSetholdoff(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.archer_protocol.Command.prototype.hasSetholdoff = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional SetZeroing setZeroing = 6;
 * @return {?proto.archer_protocol.SetZeroing}
 */
proto.archer_protocol.Command.prototype.getSetzeroing = function() {
  return /** @type{?proto.archer_protocol.SetZeroing} */ (
    jspb.Message.getWrapperField(this, proto.archer_protocol.SetZeroing, 6));
};


/**
 * @param {?proto.archer_protocol.SetZeroing|undefined} value
 * @return {!proto.archer_protocol.Command} returns this
*/
proto.archer_protocol.Command.prototype.setSetzeroing = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.archer_protocol.Command.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.archer_protocol.Command} returns this
 */
proto.archer_protocol.Command.prototype.clearSetzeroing = function() {
  return this.setSetzeroing(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.archer_protocol.Command.prototype.hasSetzeroing = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional SetCompassOffset setMagOffset = 7;
 * @return {?proto.archer_protocol.SetCompassOffset}
 */
proto.archer_protocol.Command.prototype.getSetmagoffset = function() {
  return /** @type{?proto.archer_protocol.SetCompassOffset} */ (
    jspb.Message.getWrapperField(this, proto.archer_protocol.SetCompassOffset, 7));
};


/**
 * @param {?proto.archer_protocol.SetCompassOffset|undefined} value
 * @return {!proto.archer_protocol.Command} returns this
*/
proto.archer_protocol.Command.prototype.setSetmagoffset = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.archer_protocol.Command.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.archer_protocol.Command} returns this
 */
proto.archer_protocol.Command.prototype.clearSetmagoffset = function() {
  return this.setSetmagoffset(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.archer_protocol.Command.prototype.hasSetmagoffset = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional SetAirTemp setAirTC = 8;
 * @return {?proto.archer_protocol.SetAirTemp}
 */
proto.archer_protocol.Command.prototype.getSetairtc = function() {
  return /** @type{?proto.archer_protocol.SetAirTemp} */ (
    jspb.Message.getWrapperField(this, proto.archer_protocol.SetAirTemp, 8));
};


/**
 * @param {?proto.archer_protocol.SetAirTemp|undefined} value
 * @return {!proto.archer_protocol.Command} returns this
*/
proto.archer_protocol.Command.prototype.setSetairtc = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.archer_protocol.Command.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.archer_protocol.Command} returns this
 */
proto.archer_protocol.Command.prototype.clearSetairtc = function() {
  return this.setSetairtc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.archer_protocol.Command.prototype.hasSetairtc = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional SetAirHumidity setAirHum = 9;
 * @return {?proto.archer_protocol.SetAirHumidity}
 */
proto.archer_protocol.Command.prototype.getSetairhum = function() {
  return /** @type{?proto.archer_protocol.SetAirHumidity} */ (
    jspb.Message.getWrapperField(this, proto.archer_protocol.SetAirHumidity, 9));
};


/**
 * @param {?proto.archer_protocol.SetAirHumidity|undefined} value
 * @return {!proto.archer_protocol.Command} returns this
*/
proto.archer_protocol.Command.prototype.setSetairhum = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.archer_protocol.Command.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.archer_protocol.Command} returns this
 */
proto.archer_protocol.Command.prototype.clearSetairhum = function() {
  return this.setSetairhum(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.archer_protocol.Command.prototype.hasSetairhum = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional SetAirPressure setAirPress = 10;
 * @return {?proto.archer_protocol.SetAirPressure}
 */
proto.archer_protocol.Command.prototype.getSetairpress = function() {
  return /** @type{?proto.archer_protocol.SetAirPressure} */ (
    jspb.Message.getWrapperField(this, proto.archer_protocol.SetAirPressure, 10));
};


/**
 * @param {?proto.archer_protocol.SetAirPressure|undefined} value
 * @return {!proto.archer_protocol.Command} returns this
*/
proto.archer_protocol.Command.prototype.setSetairpress = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.archer_protocol.Command.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.archer_protocol.Command} returns this
 */
proto.archer_protocol.Command.prototype.clearSetairpress = function() {
  return this.setSetairpress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.archer_protocol.Command.prototype.hasSetairpress = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional SetPowderTemp setPowderTemp = 11;
 * @return {?proto.archer_protocol.SetPowderTemp}
 */
proto.archer_protocol.Command.prototype.getSetpowdertemp = function() {
  return /** @type{?proto.archer_protocol.SetPowderTemp} */ (
    jspb.Message.getWrapperField(this, proto.archer_protocol.SetPowderTemp, 11));
};


/**
 * @param {?proto.archer_protocol.SetPowderTemp|undefined} value
 * @return {!proto.archer_protocol.Command} returns this
*/
proto.archer_protocol.Command.prototype.setSetpowdertemp = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.archer_protocol.Command.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.archer_protocol.Command} returns this
 */
proto.archer_protocol.Command.prototype.clearSetpowdertemp = function() {
  return this.setSetpowdertemp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.archer_protocol.Command.prototype.hasSetpowdertemp = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional SetWind setWind = 12;
 * @return {?proto.archer_protocol.SetWind}
 */
proto.archer_protocol.Command.prototype.getSetwind = function() {
  return /** @type{?proto.archer_protocol.SetWind} */ (
    jspb.Message.getWrapperField(this, proto.archer_protocol.SetWind, 12));
};


/**
 * @param {?proto.archer_protocol.SetWind|undefined} value
 * @return {!proto.archer_protocol.Command} returns this
*/
proto.archer_protocol.Command.prototype.setSetwind = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.archer_protocol.Command.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.archer_protocol.Command} returns this
 */
proto.archer_protocol.Command.prototype.clearSetwind = function() {
  return this.setSetwind(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.archer_protocol.Command.prototype.hasSetwind = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional ButtonPress buttonPress = 13;
 * @return {?proto.archer_protocol.ButtonPress}
 */
proto.archer_protocol.Command.prototype.getButtonpress = function() {
  return /** @type{?proto.archer_protocol.ButtonPress} */ (
    jspb.Message.getWrapperField(this, proto.archer_protocol.ButtonPress, 13));
};


/**
 * @param {?proto.archer_protocol.ButtonPress|undefined} value
 * @return {!proto.archer_protocol.Command} returns this
*/
proto.archer_protocol.Command.prototype.setButtonpress = function(value) {
  return jspb.Message.setOneofWrapperField(this, 13, proto.archer_protocol.Command.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.archer_protocol.Command} returns this
 */
proto.archer_protocol.Command.prototype.clearButtonpress = function() {
  return this.setButtonpress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.archer_protocol.Command.prototype.hasButtonpress = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional TriggerCmd cmdTrigger = 14;
 * @return {?proto.archer_protocol.TriggerCmd}
 */
proto.archer_protocol.Command.prototype.getCmdtrigger = function() {
  return /** @type{?proto.archer_protocol.TriggerCmd} */ (
    jspb.Message.getWrapperField(this, proto.archer_protocol.TriggerCmd, 14));
};


/**
 * @param {?proto.archer_protocol.TriggerCmd|undefined} value
 * @return {!proto.archer_protocol.Command} returns this
*/
proto.archer_protocol.Command.prototype.setCmdtrigger = function(value) {
  return jspb.Message.setOneofWrapperField(this, 14, proto.archer_protocol.Command.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.archer_protocol.Command} returns this
 */
proto.archer_protocol.Command.prototype.clearCmdtrigger = function() {
  return this.setCmdtrigger(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.archer_protocol.Command.prototype.hasCmdtrigger = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional GetHostDevStatus getHostDevStatus = 15;
 * @return {?proto.archer_protocol.GetHostDevStatus}
 */
proto.archer_protocol.Command.prototype.getGethostdevstatus = function() {
  return /** @type{?proto.archer_protocol.GetHostDevStatus} */ (
    jspb.Message.getWrapperField(this, proto.archer_protocol.GetHostDevStatus, 15));
};


/**
 * @param {?proto.archer_protocol.GetHostDevStatus|undefined} value
 * @return {!proto.archer_protocol.Command} returns this
*/
proto.archer_protocol.Command.prototype.setGethostdevstatus = function(value) {
  return jspb.Message.setOneofWrapperField(this, 15, proto.archer_protocol.Command.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.archer_protocol.Command} returns this
 */
proto.archer_protocol.Command.prototype.clearGethostdevstatus = function() {
  return this.setGethostdevstatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.archer_protocol.Command.prototype.hasGethostdevstatus = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional GetHostProfile getHostProfile = 16;
 * @return {?proto.archer_protocol.GetHostProfile}
 */
proto.archer_protocol.Command.prototype.getGethostprofile = function() {
  return /** @type{?proto.archer_protocol.GetHostProfile} */ (
    jspb.Message.getWrapperField(this, proto.archer_protocol.GetHostProfile, 16));
};


/**
 * @param {?proto.archer_protocol.GetHostProfile|undefined} value
 * @return {!proto.archer_protocol.Command} returns this
*/
proto.archer_protocol.Command.prototype.setGethostprofile = function(value) {
  return jspb.Message.setOneofWrapperField(this, 16, proto.archer_protocol.Command.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.archer_protocol.Command} returns this
 */
proto.archer_protocol.Command.prototype.clearGethostprofile = function() {
  return this.setGethostprofile(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.archer_protocol.Command.prototype.hasGethostprofile = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional GetProfiles getAllProfiles = 17;
 * @return {?proto.archer_protocol.GetProfiles}
 */
proto.archer_protocol.Command.prototype.getGetallprofiles = function() {
  return /** @type{?proto.archer_protocol.GetProfiles} */ (
    jspb.Message.getWrapperField(this, proto.archer_protocol.GetProfiles, 17));
};


/**
 * @param {?proto.archer_protocol.GetProfiles|undefined} value
 * @return {!proto.archer_protocol.Command} returns this
*/
proto.archer_protocol.Command.prototype.setGetallprofiles = function(value) {
  return jspb.Message.setOneofWrapperField(this, 17, proto.archer_protocol.Command.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.archer_protocol.Command} returns this
 */
proto.archer_protocol.Command.prototype.clearGetallprofiles = function() {
  return this.setGetallprofiles(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.archer_protocol.Command.prototype.hasGetallprofiles = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional UpdateProfiles updateAllProfiles = 18;
 * @return {?proto.archer_protocol.UpdateProfiles}
 */
proto.archer_protocol.Command.prototype.getUpdateallprofiles = function() {
  return /** @type{?proto.archer_protocol.UpdateProfiles} */ (
    jspb.Message.getWrapperField(this, proto.archer_protocol.UpdateProfiles, 18));
};


/**
 * @param {?proto.archer_protocol.UpdateProfiles|undefined} value
 * @return {!proto.archer_protocol.Command} returns this
*/
proto.archer_protocol.Command.prototype.setUpdateallprofiles = function(value) {
  return jspb.Message.setOneofWrapperField(this, 18, proto.archer_protocol.Command.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.archer_protocol.Command} returns this
 */
proto.archer_protocol.Command.prototype.clearUpdateallprofiles = function() {
  return this.setUpdateallprofiles(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.archer_protocol.Command.prototype.hasUpdateallprofiles = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional GetReticles getReticles = 19;
 * @return {?proto.archer_protocol.GetReticles}
 */
proto.archer_protocol.Command.prototype.getGetreticles = function() {
  return /** @type{?proto.archer_protocol.GetReticles} */ (
    jspb.Message.getWrapperField(this, proto.archer_protocol.GetReticles, 19));
};


/**
 * @param {?proto.archer_protocol.GetReticles|undefined} value
 * @return {!proto.archer_protocol.Command} returns this
*/
proto.archer_protocol.Command.prototype.setGetreticles = function(value) {
  return jspb.Message.setOneofWrapperField(this, 19, proto.archer_protocol.Command.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.archer_protocol.Command} returns this
 */
proto.archer_protocol.Command.prototype.clearGetreticles = function() {
  return this.setGetreticles(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.archer_protocol.Command.prototype.hasGetreticles = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional UpdateReticles updateReticles = 20;
 * @return {?proto.archer_protocol.UpdateReticles}
 */
proto.archer_protocol.Command.prototype.getUpdatereticles = function() {
  return /** @type{?proto.archer_protocol.UpdateReticles} */ (
    jspb.Message.getWrapperField(this, proto.archer_protocol.UpdateReticles, 20));
};


/**
 * @param {?proto.archer_protocol.UpdateReticles|undefined} value
 * @return {!proto.archer_protocol.Command} returns this
*/
proto.archer_protocol.Command.prototype.setUpdatereticles = function(value) {
  return jspb.Message.setOneofWrapperField(this, 20, proto.archer_protocol.Command.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.archer_protocol.Command} returns this
 */
proto.archer_protocol.Command.prototype.clearUpdatereticles = function() {
  return this.setUpdatereticles(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.archer_protocol.Command.prototype.hasUpdatereticles = function() {
  return jspb.Message.getField(this, 20) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.archer_protocol.GetProfiles.prototype.toObject = function(opt_includeInstance) {
  return proto.archer_protocol.GetProfiles.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.archer_protocol.GetProfiles} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.GetProfiles.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.archer_protocol.GetProfiles}
 */
proto.archer_protocol.GetProfiles.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.archer_protocol.GetProfiles;
  return proto.archer_protocol.GetProfiles.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.archer_protocol.GetProfiles} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.archer_protocol.GetProfiles}
 */
proto.archer_protocol.GetProfiles.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.archer_protocol.GetProfiles.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.archer_protocol.GetProfiles.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.archer_protocol.GetProfiles} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.GetProfiles.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.archer_protocol.GetReticles.prototype.toObject = function(opt_includeInstance) {
  return proto.archer_protocol.GetReticles.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.archer_protocol.GetReticles} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.GetReticles.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.archer_protocol.GetReticles}
 */
proto.archer_protocol.GetReticles.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.archer_protocol.GetReticles;
  return proto.archer_protocol.GetReticles.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.archer_protocol.GetReticles} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.archer_protocol.GetReticles}
 */
proto.archer_protocol.GetReticles.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.archer_protocol.GetReticles.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.archer_protocol.GetReticles.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.archer_protocol.GetReticles} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.GetReticles.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.archer_protocol.UpdateReticles.prototype.toObject = function(opt_includeInstance) {
  return proto.archer_protocol.UpdateReticles.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.archer_protocol.UpdateReticles} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.UpdateReticles.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: (f = msg.getData()) && proto.archer_protocol.Reticles.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.archer_protocol.UpdateReticles}
 */
proto.archer_protocol.UpdateReticles.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.archer_protocol.UpdateReticles;
  return proto.archer_protocol.UpdateReticles.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.archer_protocol.UpdateReticles} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.archer_protocol.UpdateReticles}
 */
proto.archer_protocol.UpdateReticles.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.archer_protocol.Reticles;
      reader.readMessage(value,proto.archer_protocol.Reticles.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.archer_protocol.UpdateReticles.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.archer_protocol.UpdateReticles.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.archer_protocol.UpdateReticles} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.UpdateReticles.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.archer_protocol.Reticles.serializeBinaryToWriter
    );
  }
};


/**
 * optional Reticles data = 1;
 * @return {?proto.archer_protocol.Reticles}
 */
proto.archer_protocol.UpdateReticles.prototype.getData = function() {
  return /** @type{?proto.archer_protocol.Reticles} */ (
    jspb.Message.getWrapperField(this, proto.archer_protocol.Reticles, 1));
};


/**
 * @param {?proto.archer_protocol.Reticles|undefined} value
 * @return {!proto.archer_protocol.UpdateReticles} returns this
*/
proto.archer_protocol.UpdateReticles.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.archer_protocol.UpdateReticles} returns this
 */
proto.archer_protocol.UpdateReticles.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.archer_protocol.UpdateReticles.prototype.hasData = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.archer_protocol.UpdateProfiles.prototype.toObject = function(opt_includeInstance) {
  return proto.archer_protocol.UpdateProfiles.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.archer_protocol.UpdateProfiles} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.UpdateProfiles.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: (f = msg.getData()) && proto.archer_protocol.FullProfileData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.archer_protocol.UpdateProfiles}
 */
proto.archer_protocol.UpdateProfiles.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.archer_protocol.UpdateProfiles;
  return proto.archer_protocol.UpdateProfiles.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.archer_protocol.UpdateProfiles} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.archer_protocol.UpdateProfiles}
 */
proto.archer_protocol.UpdateProfiles.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.archer_protocol.FullProfileData;
      reader.readMessage(value,proto.archer_protocol.FullProfileData.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.archer_protocol.UpdateProfiles.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.archer_protocol.UpdateProfiles.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.archer_protocol.UpdateProfiles} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.UpdateProfiles.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.archer_protocol.FullProfileData.serializeBinaryToWriter
    );
  }
};


/**
 * optional FullProfileData data = 1;
 * @return {?proto.archer_protocol.FullProfileData}
 */
proto.archer_protocol.UpdateProfiles.prototype.getData = function() {
  return /** @type{?proto.archer_protocol.FullProfileData} */ (
    jspb.Message.getWrapperField(this, proto.archer_protocol.FullProfileData, 1));
};


/**
 * @param {?proto.archer_protocol.FullProfileData|undefined} value
 * @return {!proto.archer_protocol.UpdateProfiles} returns this
*/
proto.archer_protocol.UpdateProfiles.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.archer_protocol.UpdateProfiles} returns this
 */
proto.archer_protocol.UpdateProfiles.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.archer_protocol.UpdateProfiles.prototype.hasData = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.archer_protocol.StatusOk.prototype.toObject = function(opt_includeInstance) {
  return proto.archer_protocol.StatusOk.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.archer_protocol.StatusOk} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.StatusOk.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.archer_protocol.StatusOk}
 */
proto.archer_protocol.StatusOk.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.archer_protocol.StatusOk;
  return proto.archer_protocol.StatusOk.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.archer_protocol.StatusOk} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.archer_protocol.StatusOk}
 */
proto.archer_protocol.StatusOk.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.archer_protocol.OkStatusCode} */ (reader.readEnum());
      msg.setCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.archer_protocol.StatusOk.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.archer_protocol.StatusOk.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.archer_protocol.StatusOk} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.StatusOk.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional OkStatusCode code = 1;
 * @return {!proto.archer_protocol.OkStatusCode}
 */
proto.archer_protocol.StatusOk.prototype.getCode = function() {
  return /** @type {!proto.archer_protocol.OkStatusCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.archer_protocol.OkStatusCode} value
 * @return {!proto.archer_protocol.StatusOk} returns this
 */
proto.archer_protocol.StatusOk.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.archer_protocol.StatusError.prototype.toObject = function(opt_includeInstance) {
  return proto.archer_protocol.StatusError.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.archer_protocol.StatusError} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.StatusError.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    text: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.archer_protocol.StatusError}
 */
proto.archer_protocol.StatusError.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.archer_protocol.StatusError;
  return proto.archer_protocol.StatusError.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.archer_protocol.StatusError} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.archer_protocol.StatusError}
 */
proto.archer_protocol.StatusError.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.archer_protocol.ErrorStatusCode} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.archer_protocol.StatusError.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.archer_protocol.StatusError.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.archer_protocol.StatusError} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.StatusError.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional ErrorStatusCode code = 1;
 * @return {!proto.archer_protocol.ErrorStatusCode}
 */
proto.archer_protocol.StatusError.prototype.getCode = function() {
  return /** @type {!proto.archer_protocol.ErrorStatusCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.archer_protocol.ErrorStatusCode} value
 * @return {!proto.archer_protocol.StatusError} returns this
 */
proto.archer_protocol.StatusError.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string text = 2;
 * @return {string}
 */
proto.archer_protocol.StatusError.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.archer_protocol.StatusError} returns this
 */
proto.archer_protocol.StatusError.prototype.setText = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.archer_protocol.SetZoomLevel.prototype.toObject = function(opt_includeInstance) {
  return proto.archer_protocol.SetZoomLevel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.archer_protocol.SetZoomLevel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.SetZoomLevel.toObject = function(includeInstance, msg) {
  var f, obj = {
    zoomlevel: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.archer_protocol.SetZoomLevel}
 */
proto.archer_protocol.SetZoomLevel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.archer_protocol.SetZoomLevel;
  return proto.archer_protocol.SetZoomLevel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.archer_protocol.SetZoomLevel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.archer_protocol.SetZoomLevel}
 */
proto.archer_protocol.SetZoomLevel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.archer_protocol.Zoom} */ (reader.readEnum());
      msg.setZoomlevel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.archer_protocol.SetZoomLevel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.archer_protocol.SetZoomLevel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.archer_protocol.SetZoomLevel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.SetZoomLevel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getZoomlevel();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional Zoom zoomLevel = 1;
 * @return {!proto.archer_protocol.Zoom}
 */
proto.archer_protocol.SetZoomLevel.prototype.getZoomlevel = function() {
  return /** @type {!proto.archer_protocol.Zoom} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.archer_protocol.Zoom} value
 * @return {!proto.archer_protocol.SetZoomLevel} returns this
 */
proto.archer_protocol.SetZoomLevel.prototype.setZoomlevel = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.archer_protocol.SetColorScheme.prototype.toObject = function(opt_includeInstance) {
  return proto.archer_protocol.SetColorScheme.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.archer_protocol.SetColorScheme} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.SetColorScheme.toObject = function(includeInstance, msg) {
  var f, obj = {
    scheme: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.archer_protocol.SetColorScheme}
 */
proto.archer_protocol.SetColorScheme.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.archer_protocol.SetColorScheme;
  return proto.archer_protocol.SetColorScheme.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.archer_protocol.SetColorScheme} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.archer_protocol.SetColorScheme}
 */
proto.archer_protocol.SetColorScheme.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.archer_protocol.ColorScheme} */ (reader.readEnum());
      msg.setScheme(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.archer_protocol.SetColorScheme.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.archer_protocol.SetColorScheme.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.archer_protocol.SetColorScheme} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.SetColorScheme.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScheme();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional ColorScheme scheme = 1;
 * @return {!proto.archer_protocol.ColorScheme}
 */
proto.archer_protocol.SetColorScheme.prototype.getScheme = function() {
  return /** @type {!proto.archer_protocol.ColorScheme} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.archer_protocol.ColorScheme} value
 * @return {!proto.archer_protocol.SetColorScheme} returns this
 */
proto.archer_protocol.SetColorScheme.prototype.setScheme = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.archer_protocol.GetHostDevStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.archer_protocol.GetHostDevStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.archer_protocol.GetHostDevStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.GetHostDevStatus.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.archer_protocol.GetHostDevStatus}
 */
proto.archer_protocol.GetHostDevStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.archer_protocol.GetHostDevStatus;
  return proto.archer_protocol.GetHostDevStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.archer_protocol.GetHostDevStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.archer_protocol.GetHostDevStatus}
 */
proto.archer_protocol.GetHostDevStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.archer_protocol.GetHostDevStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.archer_protocol.GetHostDevStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.archer_protocol.GetHostDevStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.GetHostDevStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.archer_protocol.GetHostProfile.prototype.toObject = function(opt_includeInstance) {
  return proto.archer_protocol.GetHostProfile.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.archer_protocol.GetHostProfile} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.GetHostProfile.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.archer_protocol.GetHostProfile}
 */
proto.archer_protocol.GetHostProfile.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.archer_protocol.GetHostProfile;
  return proto.archer_protocol.GetHostProfile.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.archer_protocol.GetHostProfile} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.archer_protocol.GetHostProfile}
 */
proto.archer_protocol.GetHostProfile.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.archer_protocol.GetHostProfile.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.archer_protocol.GetHostProfile.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.archer_protocol.GetHostProfile} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.GetHostProfile.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.archer_protocol.SetAirTemp.prototype.toObject = function(opt_includeInstance) {
  return proto.archer_protocol.SetAirTemp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.archer_protocol.SetAirTemp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.SetAirTemp.toObject = function(includeInstance, msg) {
  var f, obj = {
    temperature: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.archer_protocol.SetAirTemp}
 */
proto.archer_protocol.SetAirTemp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.archer_protocol.SetAirTemp;
  return proto.archer_protocol.SetAirTemp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.archer_protocol.SetAirTemp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.archer_protocol.SetAirTemp}
 */
proto.archer_protocol.SetAirTemp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTemperature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.archer_protocol.SetAirTemp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.archer_protocol.SetAirTemp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.archer_protocol.SetAirTemp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.SetAirTemp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTemperature();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 temperature = 1;
 * @return {number}
 */
proto.archer_protocol.SetAirTemp.prototype.getTemperature = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.archer_protocol.SetAirTemp} returns this
 */
proto.archer_protocol.SetAirTemp.prototype.setTemperature = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.archer_protocol.SetPowderTemp.prototype.toObject = function(opt_includeInstance) {
  return proto.archer_protocol.SetPowderTemp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.archer_protocol.SetPowderTemp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.SetPowderTemp.toObject = function(includeInstance, msg) {
  var f, obj = {
    temperature: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.archer_protocol.SetPowderTemp}
 */
proto.archer_protocol.SetPowderTemp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.archer_protocol.SetPowderTemp;
  return proto.archer_protocol.SetPowderTemp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.archer_protocol.SetPowderTemp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.archer_protocol.SetPowderTemp}
 */
proto.archer_protocol.SetPowderTemp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTemperature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.archer_protocol.SetPowderTemp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.archer_protocol.SetPowderTemp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.archer_protocol.SetPowderTemp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.SetPowderTemp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTemperature();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 temperature = 1;
 * @return {number}
 */
proto.archer_protocol.SetPowderTemp.prototype.getTemperature = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.archer_protocol.SetPowderTemp} returns this
 */
proto.archer_protocol.SetPowderTemp.prototype.setTemperature = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.archer_protocol.SetAirHumidity.prototype.toObject = function(opt_includeInstance) {
  return proto.archer_protocol.SetAirHumidity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.archer_protocol.SetAirHumidity} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.SetAirHumidity.toObject = function(includeInstance, msg) {
  var f, obj = {
    humidity: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.archer_protocol.SetAirHumidity}
 */
proto.archer_protocol.SetAirHumidity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.archer_protocol.SetAirHumidity;
  return proto.archer_protocol.SetAirHumidity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.archer_protocol.SetAirHumidity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.archer_protocol.SetAirHumidity}
 */
proto.archer_protocol.SetAirHumidity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHumidity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.archer_protocol.SetAirHumidity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.archer_protocol.SetAirHumidity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.archer_protocol.SetAirHumidity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.SetAirHumidity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHumidity();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 humidity = 1;
 * @return {number}
 */
proto.archer_protocol.SetAirHumidity.prototype.getHumidity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.archer_protocol.SetAirHumidity} returns this
 */
proto.archer_protocol.SetAirHumidity.prototype.setHumidity = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.archer_protocol.SetAirPressure.prototype.toObject = function(opt_includeInstance) {
  return proto.archer_protocol.SetAirPressure.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.archer_protocol.SetAirPressure} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.SetAirPressure.toObject = function(includeInstance, msg) {
  var f, obj = {
    pressure: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.archer_protocol.SetAirPressure}
 */
proto.archer_protocol.SetAirPressure.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.archer_protocol.SetAirPressure;
  return proto.archer_protocol.SetAirPressure.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.archer_protocol.SetAirPressure} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.archer_protocol.SetAirPressure}
 */
proto.archer_protocol.SetAirPressure.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPressure(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.archer_protocol.SetAirPressure.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.archer_protocol.SetAirPressure.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.archer_protocol.SetAirPressure} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.SetAirPressure.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPressure();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 pressure = 1;
 * @return {number}
 */
proto.archer_protocol.SetAirPressure.prototype.getPressure = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.archer_protocol.SetAirPressure} returns this
 */
proto.archer_protocol.SetAirPressure.prototype.setPressure = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.archer_protocol.SetWind.prototype.toObject = function(opt_includeInstance) {
  return proto.archer_protocol.SetWind.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.archer_protocol.SetWind} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.SetWind.toObject = function(includeInstance, msg) {
  var f, obj = {
    direction: jspb.Message.getFieldWithDefault(msg, 1, 0),
    speed: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.archer_protocol.SetWind}
 */
proto.archer_protocol.SetWind.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.archer_protocol.SetWind;
  return proto.archer_protocol.SetWind.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.archer_protocol.SetWind} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.archer_protocol.SetWind}
 */
proto.archer_protocol.SetWind.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDirection(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSpeed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.archer_protocol.SetWind.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.archer_protocol.SetWind.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.archer_protocol.SetWind} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.SetWind.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDirection();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSpeed();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 direction = 1;
 * @return {number}
 */
proto.archer_protocol.SetWind.prototype.getDirection = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.archer_protocol.SetWind} returns this
 */
proto.archer_protocol.SetWind.prototype.setDirection = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 speed = 2;
 * @return {number}
 */
proto.archer_protocol.SetWind.prototype.getSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.archer_protocol.SetWind} returns this
 */
proto.archer_protocol.SetWind.prototype.setSpeed = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.archer_protocol.SetDistance.prototype.toObject = function(opt_includeInstance) {
  return proto.archer_protocol.SetDistance.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.archer_protocol.SetDistance} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.SetDistance.toObject = function(includeInstance, msg) {
  var f, obj = {
    distance: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.archer_protocol.SetDistance}
 */
proto.archer_protocol.SetDistance.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.archer_protocol.SetDistance;
  return proto.archer_protocol.SetDistance.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.archer_protocol.SetDistance} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.archer_protocol.SetDistance}
 */
proto.archer_protocol.SetDistance.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDistance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.archer_protocol.SetDistance.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.archer_protocol.SetDistance.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.archer_protocol.SetDistance} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.SetDistance.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDistance();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 distance = 1;
 * @return {number}
 */
proto.archer_protocol.SetDistance.prototype.getDistance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.archer_protocol.SetDistance} returns this
 */
proto.archer_protocol.SetDistance.prototype.setDistance = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.archer_protocol.SetAgcMode.prototype.toObject = function(opt_includeInstance) {
  return proto.archer_protocol.SetAgcMode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.archer_protocol.SetAgcMode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.SetAgcMode.toObject = function(includeInstance, msg) {
  var f, obj = {
    mode: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.archer_protocol.SetAgcMode}
 */
proto.archer_protocol.SetAgcMode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.archer_protocol.SetAgcMode;
  return proto.archer_protocol.SetAgcMode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.archer_protocol.SetAgcMode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.archer_protocol.SetAgcMode}
 */
proto.archer_protocol.SetAgcMode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.archer_protocol.AGCMode} */ (reader.readEnum());
      msg.setMode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.archer_protocol.SetAgcMode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.archer_protocol.SetAgcMode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.archer_protocol.SetAgcMode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.SetAgcMode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional AGCMode mode = 1;
 * @return {!proto.archer_protocol.AGCMode}
 */
proto.archer_protocol.SetAgcMode.prototype.getMode = function() {
  return /** @type {!proto.archer_protocol.AGCMode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.archer_protocol.AGCMode} value
 * @return {!proto.archer_protocol.SetAgcMode} returns this
 */
proto.archer_protocol.SetAgcMode.prototype.setMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.archer_protocol.SetCompassOffset.prototype.toObject = function(opt_includeInstance) {
  return proto.archer_protocol.SetCompassOffset.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.archer_protocol.SetCompassOffset} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.SetCompassOffset.toObject = function(includeInstance, msg) {
  var f, obj = {
    offset: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.archer_protocol.SetCompassOffset}
 */
proto.archer_protocol.SetCompassOffset.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.archer_protocol.SetCompassOffset;
  return proto.archer_protocol.SetCompassOffset.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.archer_protocol.SetCompassOffset} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.archer_protocol.SetCompassOffset}
 */
proto.archer_protocol.SetCompassOffset.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.archer_protocol.SetCompassOffset.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.archer_protocol.SetCompassOffset.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.archer_protocol.SetCompassOffset} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.SetCompassOffset.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOffset();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 offset = 1;
 * @return {number}
 */
proto.archer_protocol.SetCompassOffset.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.archer_protocol.SetCompassOffset} returns this
 */
proto.archer_protocol.SetCompassOffset.prototype.setOffset = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.archer_protocol.SetHoldoff.prototype.toObject = function(opt_includeInstance) {
  return proto.archer_protocol.SetHoldoff.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.archer_protocol.SetHoldoff} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.SetHoldoff.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getFieldWithDefault(msg, 1, 0),
    y: jspb.Message.getFieldWithDefault(msg, 2, 0),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.archer_protocol.SetHoldoff}
 */
proto.archer_protocol.SetHoldoff.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.archer_protocol.SetHoldoff;
  return proto.archer_protocol.SetHoldoff.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.archer_protocol.SetHoldoff} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.archer_protocol.SetHoldoff}
 */
proto.archer_protocol.SetHoldoff.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {!proto.archer_protocol.HoldoffType} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.archer_protocol.SetHoldoff.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.archer_protocol.SetHoldoff.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.archer_protocol.SetHoldoff} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.SetHoldoff.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional int32 x = 1;
 * @return {number}
 */
proto.archer_protocol.SetHoldoff.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.archer_protocol.SetHoldoff} returns this
 */
proto.archer_protocol.SetHoldoff.prototype.setX = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 y = 2;
 * @return {number}
 */
proto.archer_protocol.SetHoldoff.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.archer_protocol.SetHoldoff} returns this
 */
proto.archer_protocol.SetHoldoff.prototype.setY = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional HoldoffType type = 3;
 * @return {!proto.archer_protocol.HoldoffType}
 */
proto.archer_protocol.SetHoldoff.prototype.getType = function() {
  return /** @type {!proto.archer_protocol.HoldoffType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.archer_protocol.HoldoffType} value
 * @return {!proto.archer_protocol.SetHoldoff} returns this
 */
proto.archer_protocol.SetHoldoff.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.archer_protocol.ButtonPress.prototype.toObject = function(opt_includeInstance) {
  return proto.archer_protocol.ButtonPress.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.archer_protocol.ButtonPress} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.ButtonPress.toObject = function(includeInstance, msg) {
  var f, obj = {
    buttonpressed: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.archer_protocol.ButtonPress}
 */
proto.archer_protocol.ButtonPress.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.archer_protocol.ButtonPress;
  return proto.archer_protocol.ButtonPress.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.archer_protocol.ButtonPress} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.archer_protocol.ButtonPress}
 */
proto.archer_protocol.ButtonPress.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.archer_protocol.ButtonEnum} */ (reader.readEnum());
      msg.setButtonpressed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.archer_protocol.ButtonPress.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.archer_protocol.ButtonPress.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.archer_protocol.ButtonPress} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.ButtonPress.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getButtonpressed();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional ButtonEnum buttonPressed = 1;
 * @return {!proto.archer_protocol.ButtonEnum}
 */
proto.archer_protocol.ButtonPress.prototype.getButtonpressed = function() {
  return /** @type {!proto.archer_protocol.ButtonEnum} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.archer_protocol.ButtonEnum} value
 * @return {!proto.archer_protocol.ButtonPress} returns this
 */
proto.archer_protocol.ButtonPress.prototype.setButtonpressed = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.archer_protocol.TriggerCmd.prototype.toObject = function(opt_includeInstance) {
  return proto.archer_protocol.TriggerCmd.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.archer_protocol.TriggerCmd} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.TriggerCmd.toObject = function(includeInstance, msg) {
  var f, obj = {
    cmd: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.archer_protocol.TriggerCmd}
 */
proto.archer_protocol.TriggerCmd.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.archer_protocol.TriggerCmd;
  return proto.archer_protocol.TriggerCmd.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.archer_protocol.TriggerCmd} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.archer_protocol.TriggerCmd}
 */
proto.archer_protocol.TriggerCmd.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.archer_protocol.CMDDirect} */ (reader.readEnum());
      msg.setCmd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.archer_protocol.TriggerCmd.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.archer_protocol.TriggerCmd.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.archer_protocol.TriggerCmd} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.TriggerCmd.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCmd();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional CMDDirect cmd = 1;
 * @return {!proto.archer_protocol.CMDDirect}
 */
proto.archer_protocol.TriggerCmd.prototype.getCmd = function() {
  return /** @type {!proto.archer_protocol.CMDDirect} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.archer_protocol.CMDDirect} value
 * @return {!proto.archer_protocol.TriggerCmd} returns this
 */
proto.archer_protocol.TriggerCmd.prototype.setCmd = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.archer_protocol.SetZeroing.prototype.toObject = function(opt_includeInstance) {
  return proto.archer_protocol.SetZeroing.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.archer_protocol.SetZeroing} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.SetZeroing.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getFieldWithDefault(msg, 1, 0),
    y: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.archer_protocol.SetZeroing}
 */
proto.archer_protocol.SetZeroing.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.archer_protocol.SetZeroing;
  return proto.archer_protocol.SetZeroing.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.archer_protocol.SetZeroing} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.archer_protocol.SetZeroing}
 */
proto.archer_protocol.SetZeroing.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.archer_protocol.SetZeroing.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.archer_protocol.SetZeroing.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.archer_protocol.SetZeroing} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.SetZeroing.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 x = 1;
 * @return {number}
 */
proto.archer_protocol.SetZeroing.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.archer_protocol.SetZeroing} returns this
 */
proto.archer_protocol.SetZeroing.prototype.setX = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 y = 2;
 * @return {number}
 */
proto.archer_protocol.SetZeroing.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.archer_protocol.SetZeroing} returns this
 */
proto.archer_protocol.SetZeroing.prototype.setY = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.archer_protocol.HostDevStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.archer_protocol.HostDevStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.archer_protocol.HostDevStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.HostDevStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    charge: jspb.Message.getFieldWithDefault(msg, 1, 0),
    zoom: jspb.Message.getFieldWithDefault(msg, 2, 0),
    airtemp: jspb.Message.getFieldWithDefault(msg, 3, 0),
    airhum: jspb.Message.getFieldWithDefault(msg, 4, 0),
    airpress: jspb.Message.getFieldWithDefault(msg, 5, 0),
    powdertemp: jspb.Message.getFieldWithDefault(msg, 6, 0),
    winddir: jspb.Message.getFieldWithDefault(msg, 7, 0),
    windspeed: jspb.Message.getFieldWithDefault(msg, 8, 0),
    pitch: jspb.Message.getFieldWithDefault(msg, 9, 0),
    cant: jspb.Message.getFieldWithDefault(msg, 10, 0),
    distance: jspb.Message.getFieldWithDefault(msg, 11, 0),
    currentprofile: jspb.Message.getFieldWithDefault(msg, 12, 0),
    colorscheme: jspb.Message.getFieldWithDefault(msg, 13, 0),
    modagc: jspb.Message.getFieldWithDefault(msg, 14, 0),
    maxzoom: jspb.Message.getFieldWithDefault(msg, 15, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.archer_protocol.HostDevStatus}
 */
proto.archer_protocol.HostDevStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.archer_protocol.HostDevStatus;
  return proto.archer_protocol.HostDevStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.archer_protocol.HostDevStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.archer_protocol.HostDevStatus}
 */
proto.archer_protocol.HostDevStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCharge(value);
      break;
    case 2:
      var value = /** @type {!proto.archer_protocol.Zoom} */ (reader.readEnum());
      msg.setZoom(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAirtemp(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAirhum(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAirpress(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPowdertemp(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWinddir(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWindspeed(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPitch(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCant(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDistance(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCurrentprofile(value);
      break;
    case 13:
      var value = /** @type {!proto.archer_protocol.ColorScheme} */ (reader.readEnum());
      msg.setColorscheme(value);
      break;
    case 14:
      var value = /** @type {!proto.archer_protocol.AGCMode} */ (reader.readEnum());
      msg.setModagc(value);
      break;
    case 15:
      var value = /** @type {!proto.archer_protocol.Zoom} */ (reader.readEnum());
      msg.setMaxzoom(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.archer_protocol.HostDevStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.archer_protocol.HostDevStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.archer_protocol.HostDevStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.HostDevStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCharge();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getZoom();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getAirtemp();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getAirhum();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getAirpress();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getPowdertemp();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getWinddir();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getWindspeed();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getPitch();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getCant();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getDistance();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getCurrentprofile();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getColorscheme();
  if (f !== 0.0) {
    writer.writeEnum(
      13,
      f
    );
  }
  f = message.getModagc();
  if (f !== 0.0) {
    writer.writeEnum(
      14,
      f
    );
  }
  f = message.getMaxzoom();
  if (f !== 0.0) {
    writer.writeEnum(
      15,
      f
    );
  }
};


/**
 * optional int32 charge = 1;
 * @return {number}
 */
proto.archer_protocol.HostDevStatus.prototype.getCharge = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.archer_protocol.HostDevStatus} returns this
 */
proto.archer_protocol.HostDevStatus.prototype.setCharge = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Zoom zoom = 2;
 * @return {!proto.archer_protocol.Zoom}
 */
proto.archer_protocol.HostDevStatus.prototype.getZoom = function() {
  return /** @type {!proto.archer_protocol.Zoom} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.archer_protocol.Zoom} value
 * @return {!proto.archer_protocol.HostDevStatus} returns this
 */
proto.archer_protocol.HostDevStatus.prototype.setZoom = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional int32 airTemp = 3;
 * @return {number}
 */
proto.archer_protocol.HostDevStatus.prototype.getAirtemp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.archer_protocol.HostDevStatus} returns this
 */
proto.archer_protocol.HostDevStatus.prototype.setAirtemp = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 airHum = 4;
 * @return {number}
 */
proto.archer_protocol.HostDevStatus.prototype.getAirhum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.archer_protocol.HostDevStatus} returns this
 */
proto.archer_protocol.HostDevStatus.prototype.setAirhum = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 airPress = 5;
 * @return {number}
 */
proto.archer_protocol.HostDevStatus.prototype.getAirpress = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.archer_protocol.HostDevStatus} returns this
 */
proto.archer_protocol.HostDevStatus.prototype.setAirpress = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 powderTemp = 6;
 * @return {number}
 */
proto.archer_protocol.HostDevStatus.prototype.getPowdertemp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.archer_protocol.HostDevStatus} returns this
 */
proto.archer_protocol.HostDevStatus.prototype.setPowdertemp = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 windDir = 7;
 * @return {number}
 */
proto.archer_protocol.HostDevStatus.prototype.getWinddir = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.archer_protocol.HostDevStatus} returns this
 */
proto.archer_protocol.HostDevStatus.prototype.setWinddir = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 windSpeed = 8;
 * @return {number}
 */
proto.archer_protocol.HostDevStatus.prototype.getWindspeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.archer_protocol.HostDevStatus} returns this
 */
proto.archer_protocol.HostDevStatus.prototype.setWindspeed = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int32 pitch = 9;
 * @return {number}
 */
proto.archer_protocol.HostDevStatus.prototype.getPitch = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.archer_protocol.HostDevStatus} returns this
 */
proto.archer_protocol.HostDevStatus.prototype.setPitch = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int32 cant = 10;
 * @return {number}
 */
proto.archer_protocol.HostDevStatus.prototype.getCant = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.archer_protocol.HostDevStatus} returns this
 */
proto.archer_protocol.HostDevStatus.prototype.setCant = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int32 distance = 11;
 * @return {number}
 */
proto.archer_protocol.HostDevStatus.prototype.getDistance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.archer_protocol.HostDevStatus} returns this
 */
proto.archer_protocol.HostDevStatus.prototype.setDistance = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int32 currentProfile = 12;
 * @return {number}
 */
proto.archer_protocol.HostDevStatus.prototype.getCurrentprofile = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.archer_protocol.HostDevStatus} returns this
 */
proto.archer_protocol.HostDevStatus.prototype.setCurrentprofile = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional ColorScheme colorScheme = 13;
 * @return {!proto.archer_protocol.ColorScheme}
 */
proto.archer_protocol.HostDevStatus.prototype.getColorscheme = function() {
  return /** @type {!proto.archer_protocol.ColorScheme} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {!proto.archer_protocol.ColorScheme} value
 * @return {!proto.archer_protocol.HostDevStatus} returns this
 */
proto.archer_protocol.HostDevStatus.prototype.setColorscheme = function(value) {
  return jspb.Message.setProto3EnumField(this, 13, value);
};


/**
 * optional AGCMode modAGC = 14;
 * @return {!proto.archer_protocol.AGCMode}
 */
proto.archer_protocol.HostDevStatus.prototype.getModagc = function() {
  return /** @type {!proto.archer_protocol.AGCMode} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {!proto.archer_protocol.AGCMode} value
 * @return {!proto.archer_protocol.HostDevStatus} returns this
 */
proto.archer_protocol.HostDevStatus.prototype.setModagc = function(value) {
  return jspb.Message.setProto3EnumField(this, 14, value);
};


/**
 * optional Zoom maxZoom = 15;
 * @return {!proto.archer_protocol.Zoom}
 */
proto.archer_protocol.HostDevStatus.prototype.getMaxzoom = function() {
  return /** @type {!proto.archer_protocol.Zoom} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {!proto.archer_protocol.Zoom} value
 * @return {!proto.archer_protocol.HostDevStatus} returns this
 */
proto.archer_protocol.HostDevStatus.prototype.setMaxzoom = function(value) {
  return jspb.Message.setProto3EnumField(this, 15, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.archer_protocol.ClientDevStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.archer_protocol.ClientDevStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.archer_protocol.ClientDevStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.ClientDevStatus.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.archer_protocol.ClientDevStatus}
 */
proto.archer_protocol.ClientDevStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.archer_protocol.ClientDevStatus;
  return proto.archer_protocol.ClientDevStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.archer_protocol.ClientDevStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.archer_protocol.ClientDevStatus}
 */
proto.archer_protocol.ClientDevStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.archer_protocol.ClientDevStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.archer_protocol.ClientDevStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.archer_protocol.ClientDevStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.ClientDevStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.archer_protocol.CoefRow.prototype.toObject = function(opt_includeInstance) {
  return proto.archer_protocol.CoefRow.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.archer_protocol.CoefRow} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.CoefRow.toObject = function(includeInstance, msg) {
  var f, obj = {
    bcCd: jspb.Message.getFieldWithDefault(msg, 1, 0),
    mv: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.archer_protocol.CoefRow}
 */
proto.archer_protocol.CoefRow.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.archer_protocol.CoefRow;
  return proto.archer_protocol.CoefRow.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.archer_protocol.CoefRow} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.archer_protocol.CoefRow}
 */
proto.archer_protocol.CoefRow.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBcCd(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMv(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.archer_protocol.CoefRow.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.archer_protocol.CoefRow.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.archer_protocol.CoefRow} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.CoefRow.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBcCd();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMv();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 bc_cd = 1;
 * @return {number}
 */
proto.archer_protocol.CoefRow.prototype.getBcCd = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.archer_protocol.CoefRow} returns this
 */
proto.archer_protocol.CoefRow.prototype.setBcCd = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 mv = 2;
 * @return {number}
 */
proto.archer_protocol.CoefRow.prototype.getMv = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.archer_protocol.CoefRow} returns this
 */
proto.archer_protocol.CoefRow.prototype.setMv = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.archer_protocol.SwPos.prototype.toObject = function(opt_includeInstance) {
  return proto.archer_protocol.SwPos.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.archer_protocol.SwPos} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.SwPos.toObject = function(includeInstance, msg) {
  var f, obj = {
    cIdx: jspb.Message.getFieldWithDefault(msg, 1, 0),
    reticleIdx: jspb.Message.getFieldWithDefault(msg, 2, 0),
    zoom: jspb.Message.getFieldWithDefault(msg, 3, 0),
    distance: jspb.Message.getFieldWithDefault(msg, 4, 0),
    distanceFrom: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.archer_protocol.SwPos}
 */
proto.archer_protocol.SwPos.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.archer_protocol.SwPos;
  return proto.archer_protocol.SwPos.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.archer_protocol.SwPos} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.archer_protocol.SwPos}
 */
proto.archer_protocol.SwPos.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCIdx(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setReticleIdx(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setZoom(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDistance(value);
      break;
    case 5:
      var value = /** @type {!proto.archer_protocol.DType} */ (reader.readEnum());
      msg.setDistanceFrom(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.archer_protocol.SwPos.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.archer_protocol.SwPos.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.archer_protocol.SwPos} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.SwPos.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCIdx();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getReticleIdx();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getZoom();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getDistance();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getDistanceFrom();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * optional int32 c_idx = 1;
 * @return {number}
 */
proto.archer_protocol.SwPos.prototype.getCIdx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.archer_protocol.SwPos} returns this
 */
proto.archer_protocol.SwPos.prototype.setCIdx = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 reticle_idx = 2;
 * @return {number}
 */
proto.archer_protocol.SwPos.prototype.getReticleIdx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.archer_protocol.SwPos} returns this
 */
proto.archer_protocol.SwPos.prototype.setReticleIdx = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 zoom = 3;
 * @return {number}
 */
proto.archer_protocol.SwPos.prototype.getZoom = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.archer_protocol.SwPos} returns this
 */
proto.archer_protocol.SwPos.prototype.setZoom = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 distance = 4;
 * @return {number}
 */
proto.archer_protocol.SwPos.prototype.getDistance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.archer_protocol.SwPos} returns this
 */
proto.archer_protocol.SwPos.prototype.setDistance = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional DType distance_from = 5;
 * @return {!proto.archer_protocol.DType}
 */
proto.archer_protocol.SwPos.prototype.getDistanceFrom = function() {
  return /** @type {!proto.archer_protocol.DType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.archer_protocol.DType} value
 * @return {!proto.archer_protocol.SwPos} returns this
 */
proto.archer_protocol.SwPos.prototype.setDistanceFrom = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.archer_protocol.HostProfile.repeatedFields_ = [25,26,27];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.archer_protocol.HostProfile.prototype.toObject = function(opt_includeInstance) {
  return proto.archer_protocol.HostProfile.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.archer_protocol.HostProfile} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.HostProfile.toObject = function(includeInstance, msg) {
  var f, obj = {
    profileName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    cartridgeName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    bulletName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    shortNameTop: jspb.Message.getFieldWithDefault(msg, 4, ""),
    shortNameBot: jspb.Message.getFieldWithDefault(msg, 5, ""),
    userNote: jspb.Message.getFieldWithDefault(msg, 6, ""),
    zeroX: jspb.Message.getFieldWithDefault(msg, 7, 0),
    zeroY: jspb.Message.getFieldWithDefault(msg, 8, 0),
    scHeight: jspb.Message.getFieldWithDefault(msg, 9, 0),
    rTwist: jspb.Message.getFieldWithDefault(msg, 10, 0),
    cMuzzleVelocity: jspb.Message.getFieldWithDefault(msg, 11, 0),
    cZeroTemperature: jspb.Message.getFieldWithDefault(msg, 12, 0),
    cTCoeff: jspb.Message.getFieldWithDefault(msg, 13, 0),
    cZeroDistanceIdx: jspb.Message.getFieldWithDefault(msg, 14, 0),
    cZeroAirTemperature: jspb.Message.getFieldWithDefault(msg, 15, 0),
    cZeroAirPressure: jspb.Message.getFieldWithDefault(msg, 16, 0),
    cZeroAirHumidity: jspb.Message.getFieldWithDefault(msg, 17, 0),
    cZeroWPitch: jspb.Message.getFieldWithDefault(msg, 18, 0),
    cZeroPTemperature: jspb.Message.getFieldWithDefault(msg, 19, 0),
    bDiameter: jspb.Message.getFieldWithDefault(msg, 20, 0),
    bWeight: jspb.Message.getFieldWithDefault(msg, 21, 0),
    bLength: jspb.Message.getFieldWithDefault(msg, 22, 0),
    twistDir: jspb.Message.getFieldWithDefault(msg, 23, 0),
    bcType: jspb.Message.getFieldWithDefault(msg, 24, 0),
    switchesList: jspb.Message.toObjectList(msg.getSwitchesList(),
    proto.archer_protocol.SwPos.toObject, includeInstance),
    distancesList: (f = jspb.Message.getRepeatedField(msg, 26)) == null ? undefined : f,
    coefRowsList: jspb.Message.toObjectList(msg.getCoefRowsList(),
    proto.archer_protocol.CoefRow.toObject, includeInstance),
    caliber: jspb.Message.getFieldWithDefault(msg, 28, ""),
    deviceUuid: jspb.Message.getFieldWithDefault(msg, 29, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.archer_protocol.HostProfile}
 */
proto.archer_protocol.HostProfile.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.archer_protocol.HostProfile;
  return proto.archer_protocol.HostProfile.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.archer_protocol.HostProfile} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.archer_protocol.HostProfile}
 */
proto.archer_protocol.HostProfile.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProfileName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCartridgeName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBulletName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setShortNameTop(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setShortNameBot(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserNote(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setZeroX(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setZeroY(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setScHeight(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRTwist(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCMuzzleVelocity(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCZeroTemperature(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCTCoeff(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCZeroDistanceIdx(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCZeroAirTemperature(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCZeroAirPressure(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCZeroAirHumidity(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCZeroWPitch(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCZeroPTemperature(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBDiameter(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBWeight(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBLength(value);
      break;
    case 23:
      var value = /** @type {!proto.archer_protocol.TwistDir} */ (reader.readEnum());
      msg.setTwistDir(value);
      break;
    case 24:
      var value = /** @type {!proto.archer_protocol.GType} */ (reader.readEnum());
      msg.setBcType(value);
      break;
    case 25:
      var value = new proto.archer_protocol.SwPos;
      reader.readMessage(value,proto.archer_protocol.SwPos.deserializeBinaryFromReader);
      msg.addSwitches(value);
      break;
    case 26:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addDistances(values[i]);
      }
      break;
    case 27:
      var value = new proto.archer_protocol.CoefRow;
      reader.readMessage(value,proto.archer_protocol.CoefRow.deserializeBinaryFromReader);
      msg.addCoefRows(value);
      break;
    case 28:
      var value = /** @type {string} */ (reader.readString());
      msg.setCaliber(value);
      break;
    case 29:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceUuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.archer_protocol.HostProfile.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.archer_protocol.HostProfile.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.archer_protocol.HostProfile} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.HostProfile.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProfileName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCartridgeName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBulletName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getShortNameTop();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getShortNameBot();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getUserNote();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getZeroX();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getZeroY();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getScHeight();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getRTwist();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getCMuzzleVelocity();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getCZeroTemperature();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getCTCoeff();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = message.getCZeroDistanceIdx();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = message.getCZeroAirTemperature();
  if (f !== 0) {
    writer.writeInt32(
      15,
      f
    );
  }
  f = message.getCZeroAirPressure();
  if (f !== 0) {
    writer.writeInt32(
      16,
      f
    );
  }
  f = message.getCZeroAirHumidity();
  if (f !== 0) {
    writer.writeInt32(
      17,
      f
    );
  }
  f = message.getCZeroWPitch();
  if (f !== 0) {
    writer.writeInt32(
      18,
      f
    );
  }
  f = message.getCZeroPTemperature();
  if (f !== 0) {
    writer.writeInt32(
      19,
      f
    );
  }
  f = message.getBDiameter();
  if (f !== 0) {
    writer.writeInt32(
      20,
      f
    );
  }
  f = message.getBWeight();
  if (f !== 0) {
    writer.writeInt32(
      21,
      f
    );
  }
  f = message.getBLength();
  if (f !== 0) {
    writer.writeInt32(
      22,
      f
    );
  }
  f = message.getTwistDir();
  if (f !== 0.0) {
    writer.writeEnum(
      23,
      f
    );
  }
  f = message.getBcType();
  if (f !== 0.0) {
    writer.writeEnum(
      24,
      f
    );
  }
  f = message.getSwitchesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      25,
      f,
      proto.archer_protocol.SwPos.serializeBinaryToWriter
    );
  }
  f = message.getDistancesList();
  if (f.length > 0) {
    writer.writePackedInt32(
      26,
      f
    );
  }
  f = message.getCoefRowsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      27,
      f,
      proto.archer_protocol.CoefRow.serializeBinaryToWriter
    );
  }
  f = message.getCaliber();
  if (f.length > 0) {
    writer.writeString(
      28,
      f
    );
  }
  f = message.getDeviceUuid();
  if (f.length > 0) {
    writer.writeString(
      29,
      f
    );
  }
};


/**
 * optional string profile_name = 1;
 * @return {string}
 */
proto.archer_protocol.HostProfile.prototype.getProfileName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.archer_protocol.HostProfile} returns this
 */
proto.archer_protocol.HostProfile.prototype.setProfileName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string cartridge_name = 2;
 * @return {string}
 */
proto.archer_protocol.HostProfile.prototype.getCartridgeName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.archer_protocol.HostProfile} returns this
 */
proto.archer_protocol.HostProfile.prototype.setCartridgeName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string bullet_name = 3;
 * @return {string}
 */
proto.archer_protocol.HostProfile.prototype.getBulletName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.archer_protocol.HostProfile} returns this
 */
proto.archer_protocol.HostProfile.prototype.setBulletName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string short_name_top = 4;
 * @return {string}
 */
proto.archer_protocol.HostProfile.prototype.getShortNameTop = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.archer_protocol.HostProfile} returns this
 */
proto.archer_protocol.HostProfile.prototype.setShortNameTop = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string short_name_bot = 5;
 * @return {string}
 */
proto.archer_protocol.HostProfile.prototype.getShortNameBot = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.archer_protocol.HostProfile} returns this
 */
proto.archer_protocol.HostProfile.prototype.setShortNameBot = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string user_note = 6;
 * @return {string}
 */
proto.archer_protocol.HostProfile.prototype.getUserNote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.archer_protocol.HostProfile} returns this
 */
proto.archer_protocol.HostProfile.prototype.setUserNote = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional int32 zero_x = 7;
 * @return {number}
 */
proto.archer_protocol.HostProfile.prototype.getZeroX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.archer_protocol.HostProfile} returns this
 */
proto.archer_protocol.HostProfile.prototype.setZeroX = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 zero_y = 8;
 * @return {number}
 */
proto.archer_protocol.HostProfile.prototype.getZeroY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.archer_protocol.HostProfile} returns this
 */
proto.archer_protocol.HostProfile.prototype.setZeroY = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int32 sc_height = 9;
 * @return {number}
 */
proto.archer_protocol.HostProfile.prototype.getScHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.archer_protocol.HostProfile} returns this
 */
proto.archer_protocol.HostProfile.prototype.setScHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int32 r_twist = 10;
 * @return {number}
 */
proto.archer_protocol.HostProfile.prototype.getRTwist = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.archer_protocol.HostProfile} returns this
 */
proto.archer_protocol.HostProfile.prototype.setRTwist = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int32 c_muzzle_velocity = 11;
 * @return {number}
 */
proto.archer_protocol.HostProfile.prototype.getCMuzzleVelocity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.archer_protocol.HostProfile} returns this
 */
proto.archer_protocol.HostProfile.prototype.setCMuzzleVelocity = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int32 c_zero_temperature = 12;
 * @return {number}
 */
proto.archer_protocol.HostProfile.prototype.getCZeroTemperature = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.archer_protocol.HostProfile} returns this
 */
proto.archer_protocol.HostProfile.prototype.setCZeroTemperature = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional int32 c_t_coeff = 13;
 * @return {number}
 */
proto.archer_protocol.HostProfile.prototype.getCTCoeff = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.archer_protocol.HostProfile} returns this
 */
proto.archer_protocol.HostProfile.prototype.setCTCoeff = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional int32 c_zero_distance_idx = 14;
 * @return {number}
 */
proto.archer_protocol.HostProfile.prototype.getCZeroDistanceIdx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.archer_protocol.HostProfile} returns this
 */
proto.archer_protocol.HostProfile.prototype.setCZeroDistanceIdx = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional int32 c_zero_air_temperature = 15;
 * @return {number}
 */
proto.archer_protocol.HostProfile.prototype.getCZeroAirTemperature = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.archer_protocol.HostProfile} returns this
 */
proto.archer_protocol.HostProfile.prototype.setCZeroAirTemperature = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional int32 c_zero_air_pressure = 16;
 * @return {number}
 */
proto.archer_protocol.HostProfile.prototype.getCZeroAirPressure = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.archer_protocol.HostProfile} returns this
 */
proto.archer_protocol.HostProfile.prototype.setCZeroAirPressure = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional int32 c_zero_air_humidity = 17;
 * @return {number}
 */
proto.archer_protocol.HostProfile.prototype.getCZeroAirHumidity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/**
 * @param {number} value
 * @return {!proto.archer_protocol.HostProfile} returns this
 */
proto.archer_protocol.HostProfile.prototype.setCZeroAirHumidity = function(value) {
  return jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * optional int32 c_zero_w_pitch = 18;
 * @return {number}
 */
proto.archer_protocol.HostProfile.prototype.getCZeroWPitch = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/**
 * @param {number} value
 * @return {!proto.archer_protocol.HostProfile} returns this
 */
proto.archer_protocol.HostProfile.prototype.setCZeroWPitch = function(value) {
  return jspb.Message.setProto3IntField(this, 18, value);
};


/**
 * optional int32 c_zero_p_temperature = 19;
 * @return {number}
 */
proto.archer_protocol.HostProfile.prototype.getCZeroPTemperature = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/**
 * @param {number} value
 * @return {!proto.archer_protocol.HostProfile} returns this
 */
proto.archer_protocol.HostProfile.prototype.setCZeroPTemperature = function(value) {
  return jspb.Message.setProto3IntField(this, 19, value);
};


/**
 * optional int32 b_diameter = 20;
 * @return {number}
 */
proto.archer_protocol.HostProfile.prototype.getBDiameter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/**
 * @param {number} value
 * @return {!proto.archer_protocol.HostProfile} returns this
 */
proto.archer_protocol.HostProfile.prototype.setBDiameter = function(value) {
  return jspb.Message.setProto3IntField(this, 20, value);
};


/**
 * optional int32 b_weight = 21;
 * @return {number}
 */
proto.archer_protocol.HostProfile.prototype.getBWeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/**
 * @param {number} value
 * @return {!proto.archer_protocol.HostProfile} returns this
 */
proto.archer_protocol.HostProfile.prototype.setBWeight = function(value) {
  return jspb.Message.setProto3IntField(this, 21, value);
};


/**
 * optional int32 b_length = 22;
 * @return {number}
 */
proto.archer_protocol.HostProfile.prototype.getBLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/**
 * @param {number} value
 * @return {!proto.archer_protocol.HostProfile} returns this
 */
proto.archer_protocol.HostProfile.prototype.setBLength = function(value) {
  return jspb.Message.setProto3IntField(this, 22, value);
};


/**
 * optional TwistDir twist_dir = 23;
 * @return {!proto.archer_protocol.TwistDir}
 */
proto.archer_protocol.HostProfile.prototype.getTwistDir = function() {
  return /** @type {!proto.archer_protocol.TwistDir} */ (jspb.Message.getFieldWithDefault(this, 23, 0));
};


/**
 * @param {!proto.archer_protocol.TwistDir} value
 * @return {!proto.archer_protocol.HostProfile} returns this
 */
proto.archer_protocol.HostProfile.prototype.setTwistDir = function(value) {
  return jspb.Message.setProto3EnumField(this, 23, value);
};


/**
 * optional GType bc_type = 24;
 * @return {!proto.archer_protocol.GType}
 */
proto.archer_protocol.HostProfile.prototype.getBcType = function() {
  return /** @type {!proto.archer_protocol.GType} */ (jspb.Message.getFieldWithDefault(this, 24, 0));
};


/**
 * @param {!proto.archer_protocol.GType} value
 * @return {!proto.archer_protocol.HostProfile} returns this
 */
proto.archer_protocol.HostProfile.prototype.setBcType = function(value) {
  return jspb.Message.setProto3EnumField(this, 24, value);
};


/**
 * repeated SwPos switches = 25;
 * @return {!Array<!proto.archer_protocol.SwPos>}
 */
proto.archer_protocol.HostProfile.prototype.getSwitchesList = function() {
  return /** @type{!Array<!proto.archer_protocol.SwPos>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.archer_protocol.SwPos, 25));
};


/**
 * @param {!Array<!proto.archer_protocol.SwPos>} value
 * @return {!proto.archer_protocol.HostProfile} returns this
*/
proto.archer_protocol.HostProfile.prototype.setSwitchesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 25, value);
};


/**
 * @param {!proto.archer_protocol.SwPos=} opt_value
 * @param {number=} opt_index
 * @return {!proto.archer_protocol.SwPos}
 */
proto.archer_protocol.HostProfile.prototype.addSwitches = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 25, opt_value, proto.archer_protocol.SwPos, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.archer_protocol.HostProfile} returns this
 */
proto.archer_protocol.HostProfile.prototype.clearSwitchesList = function() {
  return this.setSwitchesList([]);
};


/**
 * repeated int32 distances = 26;
 * @return {!Array<number>}
 */
proto.archer_protocol.HostProfile.prototype.getDistancesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 26));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.archer_protocol.HostProfile} returns this
 */
proto.archer_protocol.HostProfile.prototype.setDistancesList = function(value) {
  return jspb.Message.setField(this, 26, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.archer_protocol.HostProfile} returns this
 */
proto.archer_protocol.HostProfile.prototype.addDistances = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 26, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.archer_protocol.HostProfile} returns this
 */
proto.archer_protocol.HostProfile.prototype.clearDistancesList = function() {
  return this.setDistancesList([]);
};


/**
 * repeated CoefRow coef_rows = 27;
 * @return {!Array<!proto.archer_protocol.CoefRow>}
 */
proto.archer_protocol.HostProfile.prototype.getCoefRowsList = function() {
  return /** @type{!Array<!proto.archer_protocol.CoefRow>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.archer_protocol.CoefRow, 27));
};


/**
 * @param {!Array<!proto.archer_protocol.CoefRow>} value
 * @return {!proto.archer_protocol.HostProfile} returns this
*/
proto.archer_protocol.HostProfile.prototype.setCoefRowsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 27, value);
};


/**
 * @param {!proto.archer_protocol.CoefRow=} opt_value
 * @param {number=} opt_index
 * @return {!proto.archer_protocol.CoefRow}
 */
proto.archer_protocol.HostProfile.prototype.addCoefRows = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 27, opt_value, proto.archer_protocol.CoefRow, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.archer_protocol.HostProfile} returns this
 */
proto.archer_protocol.HostProfile.prototype.clearCoefRowsList = function() {
  return this.setCoefRowsList([]);
};


/**
 * optional string caliber = 28;
 * @return {string}
 */
proto.archer_protocol.HostProfile.prototype.getCaliber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 28, ""));
};


/**
 * @param {string} value
 * @return {!proto.archer_protocol.HostProfile} returns this
 */
proto.archer_protocol.HostProfile.prototype.setCaliber = function(value) {
  return jspb.Message.setProto3StringField(this, 28, value);
};


/**
 * optional string device_uuid = 29;
 * @return {string}
 */
proto.archer_protocol.HostProfile.prototype.getDeviceUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 29, ""));
};


/**
 * @param {string} value
 * @return {!proto.archer_protocol.HostProfile} returns this
 */
proto.archer_protocol.HostProfile.prototype.setDeviceUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 29, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.archer_protocol.ProfileList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.archer_protocol.ProfileList.prototype.toObject = function(opt_includeInstance) {
  return proto.archer_protocol.ProfileList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.archer_protocol.ProfileList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.ProfileList.toObject = function(includeInstance, msg) {
  var f, obj = {
    profileDescList: jspb.Message.toObjectList(msg.getProfileDescList(),
    proto.archer_protocol.ProfileListEntry.toObject, includeInstance),
    activeprofile: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.archer_protocol.ProfileList}
 */
proto.archer_protocol.ProfileList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.archer_protocol.ProfileList;
  return proto.archer_protocol.ProfileList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.archer_protocol.ProfileList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.archer_protocol.ProfileList}
 */
proto.archer_protocol.ProfileList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.archer_protocol.ProfileListEntry;
      reader.readMessage(value,proto.archer_protocol.ProfileListEntry.deserializeBinaryFromReader);
      msg.addProfileDesc(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setActiveprofile(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.archer_protocol.ProfileList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.archer_protocol.ProfileList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.archer_protocol.ProfileList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.ProfileList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProfileDescList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.archer_protocol.ProfileListEntry.serializeBinaryToWriter
    );
  }
  f = message.getActiveprofile();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * repeated ProfileListEntry profile_desc = 1;
 * @return {!Array<!proto.archer_protocol.ProfileListEntry>}
 */
proto.archer_protocol.ProfileList.prototype.getProfileDescList = function() {
  return /** @type{!Array<!proto.archer_protocol.ProfileListEntry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.archer_protocol.ProfileListEntry, 1));
};


/**
 * @param {!Array<!proto.archer_protocol.ProfileListEntry>} value
 * @return {!proto.archer_protocol.ProfileList} returns this
*/
proto.archer_protocol.ProfileList.prototype.setProfileDescList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.archer_protocol.ProfileListEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.archer_protocol.ProfileListEntry}
 */
proto.archer_protocol.ProfileList.prototype.addProfileDesc = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.archer_protocol.ProfileListEntry, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.archer_protocol.ProfileList} returns this
 */
proto.archer_protocol.ProfileList.prototype.clearProfileDescList = function() {
  return this.setProfileDescList([]);
};


/**
 * optional int32 activeprofile = 2;
 * @return {number}
 */
proto.archer_protocol.ProfileList.prototype.getActiveprofile = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.archer_protocol.ProfileList} returns this
 */
proto.archer_protocol.ProfileList.prototype.setActiveprofile = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.archer_protocol.ProfileListEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.archer_protocol.ProfileListEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.archer_protocol.ProfileListEntry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.ProfileListEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    profileName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    cartridgeName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    shortNameTop: jspb.Message.getFieldWithDefault(msg, 3, ""),
    shortNameBot: jspb.Message.getFieldWithDefault(msg, 4, ""),
    filePath: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.archer_protocol.ProfileListEntry}
 */
proto.archer_protocol.ProfileListEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.archer_protocol.ProfileListEntry;
  return proto.archer_protocol.ProfileListEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.archer_protocol.ProfileListEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.archer_protocol.ProfileListEntry}
 */
proto.archer_protocol.ProfileListEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProfileName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCartridgeName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setShortNameTop(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setShortNameBot(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilePath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.archer_protocol.ProfileListEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.archer_protocol.ProfileListEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.archer_protocol.ProfileListEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.ProfileListEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProfileName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCartridgeName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getShortNameTop();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getShortNameBot();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getFilePath();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string profile_name = 1;
 * @return {string}
 */
proto.archer_protocol.ProfileListEntry.prototype.getProfileName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.archer_protocol.ProfileListEntry} returns this
 */
proto.archer_protocol.ProfileListEntry.prototype.setProfileName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string cartridge_name = 2;
 * @return {string}
 */
proto.archer_protocol.ProfileListEntry.prototype.getCartridgeName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.archer_protocol.ProfileListEntry} returns this
 */
proto.archer_protocol.ProfileListEntry.prototype.setCartridgeName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string short_name_top = 3;
 * @return {string}
 */
proto.archer_protocol.ProfileListEntry.prototype.getShortNameTop = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.archer_protocol.ProfileListEntry} returns this
 */
proto.archer_protocol.ProfileListEntry.prototype.setShortNameTop = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string short_name_bot = 4;
 * @return {string}
 */
proto.archer_protocol.ProfileListEntry.prototype.getShortNameBot = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.archer_protocol.ProfileListEntry} returns this
 */
proto.archer_protocol.ProfileListEntry.prototype.setShortNameBot = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string file_path = 5;
 * @return {string}
 */
proto.archer_protocol.ProfileListEntry.prototype.getFilePath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.archer_protocol.ProfileListEntry} returns this
 */
proto.archer_protocol.ProfileListEntry.prototype.setFilePath = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.archer_protocol.FullProfileData.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.archer_protocol.FullProfileData.prototype.toObject = function(opt_includeInstance) {
  return proto.archer_protocol.FullProfileData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.archer_protocol.FullProfileData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.FullProfileData.toObject = function(includeInstance, msg) {
  var f, obj = {
    table: (f = msg.getTable()) && proto.archer_protocol.ProfileList.toObject(includeInstance, f),
    profilesList: jspb.Message.toObjectList(msg.getProfilesList(),
    proto.archer_protocol.HostProfile.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.archer_protocol.FullProfileData}
 */
proto.archer_protocol.FullProfileData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.archer_protocol.FullProfileData;
  return proto.archer_protocol.FullProfileData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.archer_protocol.FullProfileData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.archer_protocol.FullProfileData}
 */
proto.archer_protocol.FullProfileData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.archer_protocol.ProfileList;
      reader.readMessage(value,proto.archer_protocol.ProfileList.deserializeBinaryFromReader);
      msg.setTable(value);
      break;
    case 2:
      var value = new proto.archer_protocol.HostProfile;
      reader.readMessage(value,proto.archer_protocol.HostProfile.deserializeBinaryFromReader);
      msg.addProfiles(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.archer_protocol.FullProfileData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.archer_protocol.FullProfileData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.archer_protocol.FullProfileData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.FullProfileData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTable();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.archer_protocol.ProfileList.serializeBinaryToWriter
    );
  }
  f = message.getProfilesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.archer_protocol.HostProfile.serializeBinaryToWriter
    );
  }
};


/**
 * optional ProfileList table = 1;
 * @return {?proto.archer_protocol.ProfileList}
 */
proto.archer_protocol.FullProfileData.prototype.getTable = function() {
  return /** @type{?proto.archer_protocol.ProfileList} */ (
    jspb.Message.getWrapperField(this, proto.archer_protocol.ProfileList, 1));
};


/**
 * @param {?proto.archer_protocol.ProfileList|undefined} value
 * @return {!proto.archer_protocol.FullProfileData} returns this
*/
proto.archer_protocol.FullProfileData.prototype.setTable = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.archer_protocol.FullProfileData} returns this
 */
proto.archer_protocol.FullProfileData.prototype.clearTable = function() {
  return this.setTable(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.archer_protocol.FullProfileData.prototype.hasTable = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated HostProfile profiles = 2;
 * @return {!Array<!proto.archer_protocol.HostProfile>}
 */
proto.archer_protocol.FullProfileData.prototype.getProfilesList = function() {
  return /** @type{!Array<!proto.archer_protocol.HostProfile>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.archer_protocol.HostProfile, 2));
};


/**
 * @param {!Array<!proto.archer_protocol.HostProfile>} value
 * @return {!proto.archer_protocol.FullProfileData} returns this
*/
proto.archer_protocol.FullProfileData.prototype.setProfilesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.archer_protocol.HostProfile=} opt_value
 * @param {number=} opt_index
 * @return {!proto.archer_protocol.HostProfile}
 */
proto.archer_protocol.FullProfileData.prototype.addProfiles = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.archer_protocol.HostProfile, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.archer_protocol.FullProfileData} returns this
 */
proto.archer_protocol.FullProfileData.prototype.clearProfilesList = function() {
  return this.setProfilesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.archer_protocol.Reticle.prototype.toObject = function(opt_includeInstance) {
  return proto.archer_protocol.Reticle.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.archer_protocol.Reticle} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.Reticle.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: msg.getData_asB64(),
    folderName: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.archer_protocol.Reticle}
 */
proto.archer_protocol.Reticle.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.archer_protocol.Reticle;
  return proto.archer_protocol.Reticle.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.archer_protocol.Reticle} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.archer_protocol.Reticle}
 */
proto.archer_protocol.Reticle.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFolderName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.archer_protocol.Reticle.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.archer_protocol.Reticle.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.archer_protocol.Reticle} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.Reticle.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getFolderName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bytes data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.archer_protocol.Reticle.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.archer_protocol.Reticle.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.archer_protocol.Reticle.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.archer_protocol.Reticle} returns this
 */
proto.archer_protocol.Reticle.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string folder_name = 2;
 * @return {string}
 */
proto.archer_protocol.Reticle.prototype.getFolderName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.archer_protocol.Reticle} returns this
 */
proto.archer_protocol.Reticle.prototype.setFolderName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.archer_protocol.Reticles.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.archer_protocol.Reticles.prototype.toObject = function(opt_includeInstance) {
  return proto.archer_protocol.Reticles.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.archer_protocol.Reticles} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.Reticles.toObject = function(includeInstance, msg) {
  var f, obj = {
    retsList: jspb.Message.toObjectList(msg.getRetsList(),
    proto.archer_protocol.Reticle.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.archer_protocol.Reticles}
 */
proto.archer_protocol.Reticles.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.archer_protocol.Reticles;
  return proto.archer_protocol.Reticles.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.archer_protocol.Reticles} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.archer_protocol.Reticles}
 */
proto.archer_protocol.Reticles.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.archer_protocol.Reticle;
      reader.readMessage(value,proto.archer_protocol.Reticle.deserializeBinaryFromReader);
      msg.addRets(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.archer_protocol.Reticles.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.archer_protocol.Reticles.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.archer_protocol.Reticles} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.Reticles.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRetsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.archer_protocol.Reticle.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Reticle rets = 1;
 * @return {!Array<!proto.archer_protocol.Reticle>}
 */
proto.archer_protocol.Reticles.prototype.getRetsList = function() {
  return /** @type{!Array<!proto.archer_protocol.Reticle>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.archer_protocol.Reticle, 1));
};


/**
 * @param {!Array<!proto.archer_protocol.Reticle>} value
 * @return {!proto.archer_protocol.Reticles} returns this
*/
proto.archer_protocol.Reticles.prototype.setRetsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.archer_protocol.Reticle=} opt_value
 * @param {number=} opt_index
 * @return {!proto.archer_protocol.Reticle}
 */
proto.archer_protocol.Reticles.prototype.addRets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.archer_protocol.Reticle, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.archer_protocol.Reticles} returns this
 */
proto.archer_protocol.Reticles.prototype.clearRetsList = function() {
  return this.setRetsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.archer_protocol.Payload.prototype.toObject = function(opt_includeInstance) {
  return proto.archer_protocol.Payload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.archer_protocol.Payload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.Payload.toObject = function(includeInstance, msg) {
  var f, obj = {
    profile: (f = msg.getProfile()) && proto.archer_protocol.HostProfile.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.archer_protocol.Payload}
 */
proto.archer_protocol.Payload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.archer_protocol.Payload;
  return proto.archer_protocol.Payload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.archer_protocol.Payload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.archer_protocol.Payload}
 */
proto.archer_protocol.Payload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.archer_protocol.HostProfile;
      reader.readMessage(value,proto.archer_protocol.HostProfile.deserializeBinaryFromReader);
      msg.setProfile(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.archer_protocol.Payload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.archer_protocol.Payload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.archer_protocol.Payload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archer_protocol.Payload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProfile();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.archer_protocol.HostProfile.serializeBinaryToWriter
    );
  }
};


/**
 * optional HostProfile profile = 1;
 * @return {?proto.archer_protocol.HostProfile}
 */
proto.archer_protocol.Payload.prototype.getProfile = function() {
  return /** @type{?proto.archer_protocol.HostProfile} */ (
    jspb.Message.getWrapperField(this, proto.archer_protocol.HostProfile, 1));
};


/**
 * @param {?proto.archer_protocol.HostProfile|undefined} value
 * @return {!proto.archer_protocol.Payload} returns this
*/
proto.archer_protocol.Payload.prototype.setProfile = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.archer_protocol.Payload} returns this
 */
proto.archer_protocol.Payload.prototype.clearProfile = function() {
  return this.setProfile(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.archer_protocol.Payload.prototype.hasProfile = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * @enum {number}
 */
proto.archer_protocol.OkStatusCode = {
  UNKNOWN_OK_STATUS: 0,
  SUCCESS: 1
};

/**
 * @enum {number}
 */
proto.archer_protocol.ErrorStatusCode = {
  UNKNOWN_ERROR_STATUS: 0,
  FAILURE: 1,
  INVALID_DATA: 2
};

/**
 * @enum {number}
 */
proto.archer_protocol.HoldoffType = {
  UNDEFINED: 0,
  MIL: 1,
  MOA: 2,
  CLICKS: 3
};

/**
 * @enum {number}
 */
proto.archer_protocol.ColorScheme = {
  UNKNOWN_COLOR_SHEME: 0,
  SEPIA: 1,
  BLACK_HOT: 2,
  WHITE_HOT: 3
};

/**
 * @enum {number}
 */
proto.archer_protocol.AGCMode = {
  UNKNOWN_AGC_MODE: 0,
  AUTO_1: 1,
  AUTO_2: 2,
  AUTO_3: 3
};

/**
 * @enum {number}
 */
proto.archer_protocol.Zoom = {
  UNKNOWN_ZOOM_LEVEL: 0,
  ZOOM_X1: 1,
  ZOOM_X2: 2,
  ZOOM_X3: 3,
  ZOOM_X4: 4,
  ZOOM_X6: 5
};

/**
 * @enum {number}
 */
proto.archer_protocol.ButtonEnum = {
  UNKNOWN_BUTTON: 0,
  MENU_SHORT: 1,
  MENU_LONG: 2,
  UP_SHORT: 3,
  UP_LONG: 4,
  DOWN_SHORT: 5,
  DOWN_LONG: 6,
  LRF_SHORT: 7,
  LRF_LONG: 8,
  REC_SHORT: 9,
  REC_LONG: 10
};

/**
 * @enum {number}
 */
proto.archer_protocol.CMDDirect = {
  UNKNOWN_CMD_DIRECTION: 0,
  CALIBRATE_ACCEL_GYRO: 1,
  LRF_MEASUREMENT: 2,
  RESET_CM_CLICKS: 3,
  TRIGGER_FFC: 4
};

/**
 * @enum {number}
 */
proto.archer_protocol.DType = {
  VALUE: 0,
  INDEX: 1
};

/**
 * @enum {number}
 */
proto.archer_protocol.GType = {
  G1: 0,
  G7: 1,
  CUSTOM: 2
};

/**
 * @enum {number}
 */
proto.archer_protocol.TwistDir = {
  RIGHT: 0,
  LEFT: 1
};

goog.object.extend(exports, proto.archer_protocol);
